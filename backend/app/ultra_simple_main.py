#!/usr/bin/env python3
"""
üöÄ ULTRA SIMPLE REVOLUTIONARY SYSTEM - Mon Atelier IA v5.0
System ultra-simplifi√© mais r√©volutionnaire pour tests imm√©diats
"""

import asyncio
import json
import os
import time
import uuid
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, Body
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from openai import AsyncOpenAI

# Configuration
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("ultra-simple")

OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is required")
WORKSPACE_DIR = "./ultra_workspace"
os.makedirs(WORKSPACE_DIR, exist_ok=True)

app = FastAPI(title="üöÄ Ultra Simple Revolutionary", version="5.0.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ==================== SYST√àME ULTRA-SIMPLE ====================

class UltraAgent:
    def __init__(self, agent_id: str, name: str, prompt: str):
        self.agent_id = agent_id
        self.name = name
        self.prompt = prompt

class UltraSimpleEngine:
    def __init__(self):
        self.openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        self.active_workflows = {}
        self.websocket_connections = {}
        
        # Agents ultra-simples mais puissants
        self.agents = {
            "project_orchestrator": UltraAgent(
                "project_orchestrator",
                "üéØ Chef d'Orchestre de Projet",
                """Tu es un Assistant IA conversationnel expert, comme Claude ou ChatGPT. Tu es le Chef d'Orchestre de Mon Atelier IA.

üéØ MISSION : Avoir une conversation naturelle et intelligente avec l'utilisateur pour comprendre exactement son projet de d√©veloppement.

üß† STYLE CONVERSATIONNEL :
- Parle comme un humain intelligent et bienveillant
- Sois curieux et pose des questions pertinentes
- Montre que tu comprends les nuances et le contexte
- GARDE TOUJOURS le fil de la conversation pr√©c√©dente
- Adapte ton ton selon le projet (formel pour business, d√©contract√© pour perso)
- Fais des suppositions intelligentes bas√©es sur le contexte

üé® APPROCHE INTELLIGENTE :
1. ANALYSE le projet mentionn√© avec intelligence contextuelle
2. IDENTIFIE les aspects cruciaux √† clarifier (audience, fonctionnalit√©s, style)
3. POSE des questions strat√©giques qui montrent ta compr√©hension
4. SYNTH√âTISE intelligemment les r√©ponses pour orienter vers l'action
5. Apr√®s 2-3 √©changes riches, lance le d√©veloppement

üí¨ EXEMPLES DE CONVERSATION NATURELLE :

Utilisateur: "cr√©er un site moderne et √©pur√© pour un restaurant italien avec une page reservation et une pour les menus"

Toi: "Excellente id√©e ! Un site √©pur√© pour un restaurant italien peut vraiment se d√©marquer. Je pense d√©j√† √† une esth√©tique minimaliste avec peut-√™tre des touches de couleurs chaudes. 

Pour la r√©servation, envisages-tu un syst√®me simple de formulaire ou quelque chose de plus avanc√© avec calendrier interactif et gestion des cr√©neaux en temps r√©el ?"

---

R√àGLES ABSOLUES :
- JAMAIS de code dans tes r√©ponses
- Conversation fluide et naturelle uniquement  
- Quand tu as assez d'informations (2-3 √©changes), conclus par : "Parfait ! Je lance l'Agent D√©veloppeur IA pour cr√©er [description pr√©cise du projet] !"
- GARDE le contexte de TOUTE la conversation pr√©c√©dente"""
            ),
            
            "quantum_developer": UltraAgent(
                "quantum_developer",
                "‚öõÔ∏è Agent D√©veloppeur IA",
                """Tu es un d√©veloppeur quantique r√©volutionnaire expert React/TypeScript.

MISSION : Analyse d'abord la demande, puis g√©n√®re du code React/TypeScript r√©volutionnaire, complet et fonctionnel.

PROCESSUS OBLIGATOIRE :
1. ANALYSE : Commence par analyser la demande en d√©tail
2. ARCHITECTURE : D√©finis la structure du projet (composants, fichiers, d√©pendances)
3. IMPL√âMENTATION : G√©n√®re le code complet avec raisonnement
4. OPTIMISATION : Explique les choix techniques et optimisations

R√àGLES ABSOLUES :
1. TOUJOURS cr√©er du code dans des blocs avec noms de fichiers explicites
2. Code 100% fonctionnel et pr√™t pour production
3. TypeScript strict avec interfaces compl√®tes
4. Composants modernes avec hooks React
5. Styles CSS magnifiques et responsives
6. Architecture modulaire et maintenable

FORMAT OBLIGATOIRE AVEC RAISONNEMENT :

**ANALYSE DE LA DEMANDE :**
[Explique ce que tu comprends de la demande]

**ARCHITECTURE PROPOS√âE :**
[D√©cris la structure des composants et fichiers]

**IMPL√âMENTATION :**

```typescript
// FICHIER: src/components/MonComposant.tsx
import React, { useState, useEffect } from 'react';
import './MonComposant.css';

// Interface TypeScript stricte
interface Props {
  // props d√©taill√©es avec types
}

// Composant avec logique m√©tier
const MonComposant: React.FC<Props> = () => {
  // State et logique React moderne
  
  return (
    <div className="mon-composant">
      {/* JSX r√©volutionnaire avec logique */}
    </div>
  );
};

export default MonComposant;
```

```css
/* FICHIER: src/components/MonComposant.css */
.mon-composant {
  /* styles r√©volutionnaires avec CSS moderne */
  /* variables CSS, flexbox, grid, animations */
}
```

**OPTIMISATIONS ET CHOIX TECHNIQUES :**
[Explique pourquoi tu as fait ces choix]

G√âN√àRE TOUJOURS DU CODE R√âVOLUTIONNAIRE AVEC RAISONNEMENT COMPLET !"""
            ),
            
            "ultra_designer": UltraAgent(
                "ultra_designer", 
                "üé® Ultra Designer",
                """Tu es un designer ultra-r√©volutionnaire expert en CSS moderne.

MISSION : Cr√©e des designs qui r√©volutionnent l'industrie.

R√àGLES :
1. CSS ultra-moderne avec variables, animations, gradients
2. Responsive design parfait
3. Accessibilit√© totale
4. Micro-interactions fluides

FORMAT :
```css
/* FICHIER: src/styles/Revolutionary.css */
:root {
  --primary: #3b82f6;
  /* variables r√©volutionnaires */
}

/* styles r√©volutionnaires */
```

CR√âE DE LA MAGIE VISUELLE !"""
            ),
            
            "code_architect": UltraAgent(
                "code_architect",
                "üèóÔ∏è Code Architect", 
                """Tu es un architecte de code r√©volutionnaire.

MISSION : Architecture et structure de code parfaite.

R√àGLES :
1. Code structur√© et maintenable
2. Patterns modernes et best practices
3. Documentation claire
4. Performance optimale

G√âN√àRE DE L'ARCHITECTURE R√âVOLUTIONNAIRE !"""
            )
        }
        
        logger.info(f"üöÄ Ultra Simple Engine initialis√© avec {len(self.agents)} agents")

    async def create_ultra_workflow(self, prompt: str, agent_id: str = "quantum_developer") -> str:
        """Cr√©e un workflow ultra-simple et r√©volutionnaire"""
        
        workflow_id = str(uuid.uuid4())
        
        workflow_data = {
            "workflow_id": workflow_id,
            "prompt": prompt,
            "agent_id": agent_id,
            "state": "created",
            "created_at": datetime.now().isoformat(),
            "files": [],
            "response": ""
        }
        
        self.active_workflows[workflow_id] = workflow_data
        
        logger.info(f"üöÄ Workflow ultra-simple cr√©√©: {workflow_id}")
        return workflow_id

    async def execute_ultra_workflow(self, workflow_id: str, websocket: WebSocket = None):
        """Ex√©cute le workflow ultra-simple avec streaming"""
        
        if workflow_id not in self.active_workflows:
            logger.error(f"‚ùå Workflow {workflow_id} non trouv√©")
            return
        
        workflow = self.active_workflows[workflow_id]
        workflow["state"] = "executing"
        
        try:
            agent = self.agents[workflow["agent_id"]]
            prompt = workflow["prompt"]
            
            logger.info(f"üöÄ Ex√©cution agent {agent.name}")
            
            # Stream de d√©but
            if websocket:
                await websocket.send_json({
                    "type": "workflow_started",
                    "workflow_id": workflow_id,
                    "agent": agent.name
                })
            
            # Appel OpenAI avec streaming
            response_content = ""
            
            stream = await self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": agent.prompt},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=4096,
                stream=True
            )
            
            async for chunk in stream:
                if chunk.choices and chunk.choices[0].delta.content:
                    content = chunk.choices[0].delta.content
                    response_content += content
                    
                    # Stream temps r√©el
                    if websocket:
                        await websocket.send_json({
                            "type": "agent_streaming",
                            "agent": agent.agent_id,
                            "content": content,
                            "accumulated_length": len(response_content)
                        })
            
            # Extraction des fichiers
            files = self._extract_files_ultra(response_content, workflow_id)
            
            workflow["response"] = response_content
            workflow["files"] = files
            workflow["state"] = "completed"
            workflow["completed_at"] = datetime.now().isoformat()
            
            # Stream final
            if websocket:
                await websocket.send_json({
                    "type": "workflow_completed",
                    "workflow_id": workflow_id,
                    "files_count": len(files),
                    "response_length": len(response_content)
                })
            
            logger.info(f"‚úÖ Workflow {workflow_id} termin√©: {len(files)} fichiers")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur workflow {workflow_id}: {e}")
            workflow["state"] = "error"
            workflow["error"] = str(e)
            
            if websocket:
                await websocket.send_json({
                    "type": "workflow_error",
                    "workflow_id": workflow_id,
                    "error": str(e)
                })

    def _extract_files_ultra(self, content: str, workflow_id: str) -> List[Dict]:
        """Extraction ultra-simple mais efficace"""
        
        files = []
        print(f"üîç [DEBUG] Extraction fichiers pour workflow {workflow_id}")
        print(f"üîç [DEBUG] Longueur contenu: {len(content)}")
        print(f"üîç [DEBUG] Aper√ßu contenu: {content[:500]}...")
        
        # Pattern principal : // FICHIER: ou /* FICHIER: 
        import re
        
        patterns = [
            r'(?://|/\*)\s*FICHIER:\s*([^\n]+)\n(.*?)(?=(?://|/\*)\s*FICHIER:|```|$)',
            r'```(\w+)\s*\n(?://|/\*|#)\s*FICHIER:\s*([^\n]+)\n(.*?)```'
        ]
        
        for pattern in patterns:
            matches = re.finditer(pattern, content, re.DOTALL | re.IGNORECASE)
            
            for match in matches:
                groups = match.groups()
                
                if len(groups) == 2:  # filepath + content
                    filepath = groups[0].strip()
                    file_content = groups[1].strip()
                    language = self._detect_lang(filepath)
                elif len(groups) == 3:  # lang + filepath + content
                    language = groups[0]
                    filepath = groups[1].strip()
                    file_content = groups[2].strip()
                else:
                    continue
                
                if file_content and len(file_content) > 20:
                    # Nettoyer le nom de fichier pour √©viter les caract√®res invalides
                    clean_filepath = self._clean_filepath(filepath)
                    
                    # Sauvegarder physiquement
                    full_path = Path(WORKSPACE_DIR) / workflow_id / clean_filepath
                    full_path.parent.mkdir(parents=True, exist_ok=True)
                    
                    with open(full_path, 'w', encoding='utf-8') as f:
                        f.write(file_content)
                    
                    file_info = {
                        "name": filepath.split('/')[-1],  # Nom du fichier seul
                        "path": filepath,
                        "content": file_content,
                        "language": language,
                        "size": len(file_content),
                        "created_at": datetime.now().isoformat()
                    }
                    
                    files.append(file_info)
                    logger.info(f"üìÅ Fichier cr√©√©: {filepath}")
        
        print(f"üîç [DEBUG] Extraction termin√©e: {len(files)} fichiers trouv√©s")
        for i, file in enumerate(files):
            print(f"üîç [DEBUG] Fichier {i}: {file.get('name', 'no-name')} ({len(file.get('content', ''))} chars)")
        
        return files

    def _clean_filepath(self, filepath: str) -> str:
        """Nettoie le nom de fichier pour √©viter les caract√®res invalides"""
        import re
        # Supprimer les caract√®res invalides pour Windows
        clean_path = re.sub(r'[<>:"|?*]', '', filepath)
        # Remplacer les espaces multiples et autres caract√®res probl√©matiques
        clean_path = re.sub(r'\s+', '_', clean_path)
        # Supprimer les points de fin et espaces
        clean_path = clean_path.strip('. ')
        return clean_path

    def _detect_lang(self, filepath: str) -> str:
        ext = Path(filepath).suffix.lower()
        mapping = {
            '.tsx': 'typescript', '.ts': 'typescript',
            '.jsx': 'javascript', '.js': 'javascript', 
            '.css': 'css', '.scss': 'scss',
            '.html': 'html', '.json': 'json',
            '.py': 'python', '.md': 'markdown'
        }
        return mapping.get(ext, 'text')

# Instance globale
ultra_engine = UltraSimpleEngine()

# ==================== ENDPOINTS ULTRA-SIMPLES ====================

class UltraWorkflowRequest(BaseModel):
    prompt: str
    agent_id: Optional[str] = "quantum_developer"

@app.post("/ultra/workflow/start")
async def start_ultra_workflow(request: UltraWorkflowRequest):
    """üöÄ D√©marre un workflow ultra-simple r√©volutionnaire"""
    
    try:
        workflow_id = await ultra_engine.create_ultra_workflow(
            request.prompt, 
            request.agent_id
        )
        
        # Le workflow sera lanc√© quand le WebSocket se connectera
        # Cela permet de capturer tout le streaming depuis le d√©but
        
        return {
            "success": True,
            "workflow_id": workflow_id,
            "message": "üöÄ Workflow ultra-r√©volutionnaire d√©marr√© !",
            "websocket_url": f"/ultra/ws/{workflow_id}",
            "status_url": f"/ultra/workflow/{workflow_id}/status"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        raise HTTPException(500, str(e))

@app.get("/ultra/workflow/{workflow_id}/status")
async def get_ultra_status(workflow_id: str):
    """üìä Statut du workflow ultra"""
    
    if workflow_id not in ultra_engine.active_workflows:
        raise HTTPException(404, "Workflow non trouv√©")
    
    return ultra_engine.active_workflows[workflow_id]

@app.get("/ultra/workflow/{workflow_id}/files")
async def get_ultra_files(workflow_id: str):
    """üìÅ Fichiers du workflow ultra"""
    
    if workflow_id not in ultra_engine.active_workflows:
        raise HTTPException(404, "Workflow non trouv√©")
    
    workflow = ultra_engine.active_workflows[workflow_id]
    files_list = workflow.get("files", [])
    
    # Convertir la liste de fichiers en dictionnaire avec le nom comme cl√©
    files_dict = {}
    for file in files_list:
        filename = file.get("name", file.get("path", f"file_{len(files_dict)}"))
        files_dict[filename] = {
            "content": file.get("content", ""),
            "language": file.get("language", "javascript"),
            "path": file.get("path", filename)
        }
    
    print(f"üîç [DEBUG] get_ultra_files - {len(files_dict)} fichiers retourn√©s")
    for name, content in files_dict.items():
        print(f"üîç [DEBUG] Fichier: {name} ({len(content.get('content', ''))} chars)")
    
    return {
        "workflow_id": workflow_id,
        "files": files_dict,
        "total_files": len(files_dict)
    }

@app.websocket("/ultra/ws/{workflow_id}")
async def ultra_websocket(websocket: WebSocket, workflow_id: str):
    """üåä WebSocket ultra-simple"""
    
    await websocket.accept()
    ultra_engine.websocket_connections[workflow_id] = websocket
    
    try:
        logger.info(f"üåä WebSocket connect√©: {workflow_id}")
        
        # Si workflow pas encore ex√©cut√©, le lancer
        if workflow_id in ultra_engine.active_workflows:
            workflow = ultra_engine.active_workflows[workflow_id]
            if workflow["state"] == "created":
                await ultra_engine.execute_ultra_workflow(workflow_id, websocket)
        
        # Garder la connexion
        while True:
            try:
                message = await websocket.receive_text()
                if message == "ping":
                    await websocket.send_json({"type": "pong"})
            except WebSocketDisconnect:
                break
                
    except Exception as e:
        logger.error(f"‚ùå WebSocket error: {e}")
    finally:
        if workflow_id in ultra_engine.websocket_connections:
            del ultra_engine.websocket_connections[workflow_id]

@app.post("/ultra/chat")
async def ultra_chat(data: dict = Body(...)):
    """üí¨ Chat ultra-simple direct"""
    
    message = data.get("message", "")
    agent_id = data.get("agent", "quantum_developer")
    
    if not message:
        raise HTTPException(400, "Message requis")
    
    try:
        agent = ultra_engine.agents.get(agent_id)
        if not agent:
            raise HTTPException(404, f"Agent {agent_id} non trouv√©")
        
        response = await ultra_engine.openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": agent.prompt},
                {"role": "user", "content": message}
            ],
            temperature=0.3,
            max_tokens=4096
        )
        
        content = response.choices[0].message.content
        
        return {
            "success": True,
            "agent": agent_id,
            "response": content,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Chat error: {e}")
        raise HTTPException(500, str(e))

@app.get("/ultra/debug")
async def ultra_debug():
    """üîç Debug ultra-simple"""
    
    return {
        "system": "Ultra Simple Revolutionary v5.0",
        "status": "üöÄ ULTRA SYSTEM ONLINE",
        "agents": {
            agent_id: agent.name 
            for agent_id, agent in ultra_engine.agents.items()
        },
        "active_workflows": len(ultra_engine.active_workflows),
        "websockets": len(ultra_engine.websocket_connections),
        "timestamp": datetime.now().isoformat()
    }

@app.get("/ultra/health")
async def ultra_health():
    """üíö Health check ultra"""
    
    try:
        # Test OpenAI
        await ultra_engine.openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "test"}],
            max_tokens=1
        )
        
        return {
            "status": "healthy",
            "version": "5.0.0",
            "openai": "connected",
            "agents": len(ultra_engine.agents),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ LANCEMENT SYST√àME ULTRA-R√âVOLUTIONNAIRE")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8011,
        log_level="info"
    )