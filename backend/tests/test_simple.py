import asyncio
import sys
import requests

async def test_setup():
    print("üß™ Test rapide Mon Atelier IA")
    print("=" * 40)
    
    try:
        # 1. Test imports
        sys.path.append('.')
        from app.services.ai_service import query_agent, get_available_agents
        print("‚úÖ Modules import√©s avec succ√®s")
        
        # 2. Test liste des agents
        agents = get_available_agents()
        print(f"‚úÖ {len(agents)} agents disponibles: {agents[:3]}...")
        
        # 3. Test Ollama
        try:
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get('models', [])
                print(f"‚úÖ Ollama actif avec {len(models)} mod√®les")
                
                # Test agent simple
                result = await query_agent("visionnaire", "Test simple")
                if len(result) > 50:
                    print("‚úÖ Agent fonctionne (IA r√©elle)")
                else:
                    print("‚ö†Ô∏è Agent en mode simulation")
                    
            else:
                print("‚ö†Ô∏è Ollama r√©pond mais pas correctement")
                
        except requests.exceptions.RequestException:
            print("‚ö†Ô∏è Ollama non accessible - Mode simulation")
            result = await query_agent("visionnaire", "Test simulation")
            print("‚úÖ Mode simulation fonctionne")
        
        print("\nüéâ Configuration fonctionnelle !")
        print("\nPour d√©marrer le serveur:")
        print("uvicorn app.main:app --reload")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        print("\nV√©rifiez que vous √™tes dans le dossier backend/")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_setup())
    input("\nAppuyez sur Entr√©e pour continuer...")
    exit(0 if success else 1)
    