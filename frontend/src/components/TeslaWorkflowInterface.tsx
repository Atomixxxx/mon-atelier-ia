import React, { useState, useRef, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Send, 
  Loader2, 
  Bot, 
  User, 
  Code, 
  Eye, 
  Terminal,
  Play,
  Square,
  CheckCircle,
  AlertCircle,
  Zap,
  Brain,
  Settings,
  Monitor,
  Sparkles,
  Target,
  PanelRightClose,
  PanelRightOpen,
  Clock,
  TrendingUp,
  Shield,
  Key,
  FileText,
  Copy,
  Download,
  Maximize2,
  X
} from 'lucide-react';
import MonacoEditor from '@monaco-editor/react';

// Import des nouveaux composants UX
import { useNotifications } from '../hooks/useNotifications';
import { useAuth, useAuthenticatedRequest } from '../hooks/useAuth';
import NotificationSystem from './ui/NotificationSystem';
import StatusIndicator, { StatusBar, ActionButton, WorkflowProgress } from './ui/StatusIndicator';
import ConfigurationPanel from './ConfigurationPanel';

interface Message {
  id: string;
  type: 'user' | 'assistant' | 'workflow' | 'system';
  content: string;
  timestamp: Date;
  agent?: string;
  isStreaming?: boolean;
  workflowStep?: number;
  totalSteps?: number;
  isCode?: boolean;
  codeLanguage?: string;
}

interface WorkflowStep {
  id: string;
  name: string;
  agent: string;
  status: 'pending' | 'running' | 'completed' | 'error';
  progress: number;
  error?: string;
  startTime?: Date;
  endTime?: Date;
  result?: string;
}

interface Agent {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  color: string;
  isActive: boolean;
  specialization: string[];
}

const TeslaWorkflowInterface: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isWorkflowRunning, setIsWorkflowRunning] = useState(false);
  const [currentWorkflowId, setCurrentWorkflowId] = useState<string | null>(null);
  const [workflowSteps, setWorkflowSteps] = useState<WorkflowStep[]>([]);
  
  // R√©f√©rences pour optimiser le streaming et √©viter les tremblements
  const streamingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const streamingBufferRef = useRef<string>('');
  
  // √âtats principaux (d√©clar√©s avant les effets qui les utilisent)
  const [showWorkflowPanel, setShowWorkflowPanel] = useState(true); // Forcer l'affichage d√®s le d√©marrage
  const [websocket, setWebsocket] = useState<WebSocket | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected' | 'connecting'>('disconnected');
  
  // √âtats pour la conversation contextuelle
  const [isInDiscoveryMode, setIsInDiscoveryMode] = useState(false);
  const [conversationExchangeCount, setConversationExchangeCount] = useState(0);
  const [discoveryContext, setDiscoveryContext] = useState<{
    originalPrompt: string;
    projectType: string;
    gatheredInfo: Record<string, any>;
    questionsAsked: string[];
    conversationStep: number;
  } | null>(null);
  const [aiPersonality, setAiPersonality] = useState('friendly'); // friendly, professional, creative
  
  // Effet de nettoyage pour √©viter les fuites m√©moire
  useEffect(() => {
    return () => {
      if (streamingTimeoutRef.current) {
        clearTimeout(streamingTimeoutRef.current);
      }
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
      streamingBufferRef.current = '';
      if (websocket) {
        websocket.close();
      }
    };
  }, [websocket]);
  
  // R√©f√©rences
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  
  // √âtats pour Monaco Editor et Preview
  const [generatedCode, setGeneratedCode] = useState(`// üöÄ Atelier IA - Code Generator
// Votre code g√©n√©r√© appara√Ætra ici

import React from 'react';

const MonApplication: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          Bienvenue dans votre application IA
        </h1>
        <p className="text-xl text-gray-600">
          D√©crivez votre projet pour commencer la g√©n√©ration
        </p>
      </div>
    </div>
  );
};

export default MonApplication;`);
  const [generatedHtml, setGeneratedHtml] = useState<string>(''); // HTML pour la preview
  const [codeLanguage, setCodeLanguage] = useState('typescript');
  const [currentNotificationId, setCurrentNotificationId] = useState<string | null>(null);
  const [showCodeEditor, setShowCodeEditor] = useState(true); // Forcer l'affichage du code editor
  const [editorView, setEditorView] = useState<'workflow' | 'code' | 'preview' | 'config'>('workflow'); // D√©marrer sur la vue workflow
  const [showPreview, setShowPreview] = useState(false);
  const [previewContent, setPreviewContent] = useState('');
  const [showConfigPanel, setShowConfigPanel] = useState(false);
  
  // Syst√®me de fichiers du projet
  const [projectFiles, setProjectFiles] = useState<Record<string, any>>({});
  const [selectedFile, setSelectedFile] = useState<string>('');
  const [generatedFiles, setGeneratedFiles] = useState<Array<{name: string, content: string, language: string}>>([]);
  const [showFileExplorer, setShowFileExplorer] = useState(true);

  // Hooks pour l'UX am√©lior√©e
  const notifications = useNotifications();
  // const { isAuthenticated, user, hasPermission } = useAuth();
  
  // Valeurs temporaires pour les tests
  const isAuthenticated = true;
  const user = { id: 'test', name: 'Test User' };
  const hasPermission = () => true;
  // const { request } = useAuthenticatedRequest();
  
  // Initialiser le service ChatGPT streaming au d√©marrage
  useEffect(() => {
    const initializeStreaming = async () => {
      try {
        const response = await fetch('http://localhost:8005/ultra/debug', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (response.ok) {
          const data = await response.json();
          console.log('üöÄ Nouveau syst√®me simple initialis√©:', data);
        } else {
          console.warn('‚ö†Ô∏è √âchec initialisation nouveau syst√®me');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur initialisation nouveau syst√®me:', error);
      }
    };

    initializeStreaming();
  }, []);
  
  // Fonction temporaire sans auth pour les tests - NOUVEAU BACKEND PORT 8002
  const request = async (url: string, options: any = {}) => {
    const response = await fetch(`http://localhost:8011${url}`, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return response.json();
  };

  const agents: Agent[] = [
    {
      id: 'frontend',
      name: 'Frontend',
      description: 'React/TypeScript Developer',
      icon: <Monitor className="w-5 h-5" />,
      color: '#dc2626',
      isActive: true,
      specialization: ['react', 'typescript', 'ui']
    },
    {
      id: 'backend',
      name: 'Backend',
      description: 'Python/FastAPI Developer',
      icon: <Terminal className="w-5 h-5" />,
      color: '#dc2626',
      isActive: true,
      specialization: ['fastapi', 'python', 'database']
    },
    {
      id: 'designer',
      name: 'Designer',
      description: 'UI/UX Designer',
      icon: <Sparkles className="w-5 h-5" />,
      color: '#dc2626',
      isActive: true,
      specialization: ['ui_design', 'ux', 'css']
    }
  ];

  // R√©f√©rence pour optimiser le scroll
  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  const scrollToBottom = () => {
    // Utiliser un d√©lai pour √©viter les scrolls trop fr√©quents
    if (scrollTimeoutRef.current) {
      clearTimeout(scrollTimeoutRef.current);
    }
    scrollTimeoutRef.current = setTimeout(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }, 100);
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // G√©n√©rer le preview automatiquement quand le code change
  useEffect(() => {
    if (generatedCode && generatedCode.trim() !== '') {
      setPreviewContent(generatePreviewHTML(generatedCode));
      setShowPreview(true);
    }
  }, [generatedCode]);

  // WebSocket connection pour syst√®me ultra-r√©volutionnaire
  const connectUltraWebSocket = useCallback((workflowId: string) => {
    setConnectionStatus('connecting');
    const ws = new WebSocket(`ws://localhost:8011/ultra/ws/${workflowId}`);
    
    ws.onopen = () => {
      console.log('üåä WebSocket connect√©');
      setWebsocket(ws);
      setConnectionStatus('connected');
    };

    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log('üì® WebSocket ultra message:', data);
        
        // Validation des donn√©es re√ßues
        if (!data || typeof data !== 'object') {
          console.warn('‚ö†Ô∏è Donn√©es WebSocket invalides:', data);
          return;
        }

        // Traitement sp√©cifique pour le syst√®me ultra-r√©volutionnaire
        console.log('üì® Type de message WebSocket:', data.type, 'Contenu:', data.content);
        
        switch (data.type) {
          case 'workflow_started':
            const startMessage: Message = {
              id: `ws_start_${Date.now()}`,
              type: 'system',
              content: `üöÄ Workflow ultra-r√©volutionnaire d√©marr√© ! Agent: ${data.agent}`,
              timestamp: new Date()
            };
            setMessages(prev => [...prev, startMessage]);
            break;

          case 'agent_streaming':
            console.log('üåä Message de streaming re√ßu:', data.content);
            const streamMessage: Message = {
              id: `ws_stream_${Date.now()}`,
              type: 'assistant',
              content: data.content || 'G√©n√©ration en cours...',
              timestamp: new Date(),
              agent: data.agent,
              isStreaming: true
            };
            setMessages(prev => [...prev, streamMessage]);
            break;

          case 'workflow_completed':
            const completeMessage: Message = {
              id: `ws_complete_${Date.now()}`,
              type: 'system',
              content: `‚úÖ Workflow termin√© ! ${data.files_count} fichiers g√©n√©r√©s`,
              timestamp: new Date()
            };
            setMessages(prev => [...prev, completeMessage]);
            break;

          case 'workflow_error':
            console.error('‚ùå WORKFLOW ERROR D√âTAILS:', data);
            const errorMessage: Message = {
              id: `ws_error_${Date.now()}`,
              type: 'system',
              content: `‚ùå Erreur workflow: ${data.error || 'Erreur inconnue'}`,
              timestamp: new Date()
            };
            setMessages(prev => [...prev, errorMessage]);
            break;

          default:
            // Messages g√©n√©riques avec logging
            console.log('üì® Message WebSocket non reconnu:', data);
            const genericMessage: Message = {
              id: `ws_${Date.now()}`,
              type: 'system',
              content: `üì® ${data.type}: ${JSON.stringify(data).substring(0, 100)}...`,
              timestamp: new Date()
            };
            setMessages(prev => [...prev, genericMessage]);
        }
        
      } catch (error) {
        console.error('Erreur parsing WebSocket ultra:', error);
      }
    };

    ws.onclose = () => {
      console.log('üîå WebSocket ultra d√©connect√©');
      setWebsocket(null);
      setConnectionStatus('disconnected');
    };

    ws.onerror = (error) => {
      console.error('‚ùå Erreur WebSocket ultra:', error);
      setConnectionStatus('disconnected');
    };

  }, []);

  const startWorkflow = async () => {
    if (!input.trim() || isWorkflowRunning) return;
    
    console.log('üéØ START WORKFLOW appel√© avec:', input.trim());

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: input,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = input;
    setInput('');
    
    // Reset counter si c'est une nouvelle conversation (pas en mode discovery)
    if (!isInDiscoveryMode) {
      setConversationExchangeCount(0);
    }
    
    // V√©rifier si on est en mode d√©couverte
    if (isInDiscoveryMode) {
      // Traiter la r√©ponse dans le contexte de la d√©couverte
      await handleDiscoveryResponse(currentInput);
      return;
    }
    
    // TOUJOURS d√©marrer par une conversation avec le Chef d'Orchestre
    console.log('üéØ D√©marrage de la conversation avec le Chef d\'Orchestre...');
    
    try {
      const data = await request('/ultra/chat', {
        method: 'POST',
        body: JSON.stringify({  
          message: currentInput,
          agent: 'project_orchestrator'
        })
      });
      
      if (data && data.response) {
        const orchestratorMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'assistant',
          content: data.response,
          timestamp: new Date(),
          agent: 'project_orchestrator'
        };
        
        setMessages(prev => [...prev, orchestratorMessage]);
        
        // Debug : voir la r√©ponse exacte du Chef d'Orchestre
        console.log('üîç R√©ponse Chef d\'Orchestre (startWorkflow):', data.response);
        
        // V√©rifier si le Chef d'Orchestre dit qu'il lance l'Agent D√©veloppeur IA
        const responseText = data.response.toLowerCase();
        const shouldLaunchDeveloper = responseText.includes('je lance l\'agent d√©veloppeur ia') ||
                                    responseText.includes('je lance le agent d√©veloppeur') ||
                                    responseText.includes('lance l\'agent d√©veloppeur') ||
                                    responseText.includes('lance le agent d√©veloppeur') ||
                                    responseText.includes('lancer le d√©veloppement') ||
                                    responseText.includes('commencer le d√©veloppement') ||
                                    responseText.includes('d√©velopper votre') ||
                                    responseText.includes('cr√©er cette') ||
                                    responseText.includes('assez d\'informations') ||
                                    responseText.includes('j\'ai tout ce qu\'il faut') ||
                                    responseText.includes('on peut commencer') ||
                                    (responseText.includes('parfait') && responseText.includes('lance')) ||
                                    (responseText.includes('excellent') && responseText.includes('lance')) ||
                                    (responseText.includes('super') && responseText.includes('lance')) ||
                                    (responseText.includes('c\'est parti') && responseText.includes('d√©velopp')) ||
                                    (responseText.includes('allons-y') && responseText.includes('cr√©er'));
        
        console.log('üîç shouldLaunchDeveloper (startWorkflow):', shouldLaunchDeveloper);
        
        if (shouldLaunchDeveloper) {
          console.log('üöÄ Chef d\'Orchestre lance l\'Agent D√©veloppeur IA ! (startWorkflow)');
          
          // Cr√©er un prompt enrichi avec toute la conversation
          const conversationHistory = messages
            .filter(msg => msg.type === 'user')
            .map(msg => msg.content)
            .join(' ');
          
          const enrichedPrompt = `${conversationHistory} ${currentInput}`;
          
          console.log('üîç Prompt enrichi (startWorkflow):', enrichedPrompt);
          
          // Lancer le workflow avec l'Agent D√©veloppeur IA
          setTimeout(async () => {
            console.log('üöÄ Appel launchQuantumDeveloper (startWorkflow)...');
            await launchQuantumDeveloper(enrichedPrompt);
          }, 1000);
          
          setIsInDiscoveryMode(false);
        } else {
          console.log('‚è∏Ô∏è Pas de signal de lancement d√©tect√© (startWorkflow), entrer en mode conversationnel...');
          // Incr√©menter le compteur d'√©changes
          const newExchangeCount = conversationExchangeCount + 1;
          setConversationExchangeCount(newExchangeCount);
          
          console.log('üî¢ Nombre d\'√©changes de conversation:', newExchangeCount);
          
          // Force launch apr√®s 5 √©changes (augment√© pour laisser plus de temps)
          if (newExchangeCount >= 5) {
            console.log('üöÄ FORCE LAUNCH: 5 √©changes atteints, lancement automatique du d√©veloppeur !');
            const conversationHistory = messages
              .filter(msg => msg.type === 'user')
              .map(msg => msg.content)
              .join(' ');
            
            const enrichedPrompt = `${conversationHistory} ${currentInput}`;
            
            setTimeout(async () => {
              await launchQuantumDeveloper(enrichedPrompt);
            }, 1000);
            
            setIsInDiscoveryMode(false);
            setConversationExchangeCount(0);
            return;
          }
          
          // Entrer en mode conversationnel si ce n'est pas d√©j√† fait
          if (!isInDiscoveryMode) {
            setIsInDiscoveryMode(true);
            setDiscoveryContext({
              originalPrompt: currentInput,
              projectType: detectProjectType(currentInput),
              aiPersonality: selectAIPersonality(currentInput),
              conversationStep: 1,
              questionsAsked: [],
              gatheredInfo: {},
              userPreferences: {}
            });
          }
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur conversation orchestrateur:', error);
      notifications.error('Erreur de communication', 'Impossible de contacter le Chef d\'Orchestre');
    }
    
  }; // Fin de la fonction startWorkflow - utilise toujours le mode conversationnel

  // Fonction pour lancer l'Agent D√©veloppeur IA apr√®s la conversation
  const launchQuantumDeveloper = async (enrichedPrompt: string) => {
    console.log('üöÄ Lancement de l\'Agent D√©veloppeur IA avec prompt:', enrichedPrompt);
    setIsWorkflowRunning(true);
    setShowWorkflowPanel(true);
    
    try {
      const data = await request('/ultra/workflow/start', {
        method: 'POST',
        body: JSON.stringify({
          prompt: enrichedPrompt,
          agent_id: 'quantum_developer'
        })
      });

      if (data && data.success) {
        console.log('üöÄ Workflow Agent D√©veloppeur IA d√©marr√©:', data);
        
        setCurrentWorkflowId(data.workflow_id);
        
        const steps = [{
          id: 'step_quantum',
          name: 'Agent D√©veloppeur IA',
          agent: 'quantum_developer',
          status: 'pending' as const,
          progress: 0
        }];
        
        setWorkflowSteps(steps);
        
        const workflowMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'workflow',
          content: `üöÄ Agent D√©veloppeur IA lanc√© ! G√©n√©ration en cours...`,
          timestamp: new Date()
        };

        setMessages(prev => [...prev, workflowMessage]);
        
        // Connecter WebSocket pour le streaming
        const ultraWs = new WebSocket(`ws://localhost:8011/ultra/ws/${data.workflow_id}`);
        
        ultraWs.onopen = () => {
          console.log('üåä WebSocket connect√© pour Agent D√©veloppeur IA');
        };
        
        ultraWs.onmessage = (event) => {
          try {
            const wsData = JSON.parse(event.data);
            console.log('üì® Stream re√ßu:', wsData.type);
            
            if (wsData.type === 'workflow_completed') {
              console.log('‚úÖ G√©n√©ration termin√©e !');
              
              setIsWorkflowRunning(false);
              
              // R√©cup√©rer les fichiers
              setTimeout(async () => {
                try {
                  const filesResponse = await request(`/ultra/workflow/${wsData.workflow_id}/files`);
                  
                  if (filesResponse.files && Object.keys(filesResponse.files).length > 0) {
                    const filesList = Object.entries(filesResponse.files).map(([path, file]) => ({
                      path,
                      content: file.content,
                      language: file.language
                    }));
                    
                    setGeneratedFiles(filesList);
                    
                    if (filesList.length > 0) {
                      setSelectedFile(filesList[0]);
                    }
                    
                    const previewHtml = generatePreviewFromFiles(filesList);
                    setPreviewContent(previewHtml);
                    
                    const completionMessage: Message = {
                      id: `completion_${Date.now()}`,
                      type: 'system',
                      content: `‚úÖ **Projet cr√©√© avec succ√®s !** ${filesList.length} fichier(s) g√©n√©r√©(s).\n\nüé¨ **Consultez l'onglet Preview Live !**`,
                      timestamp: new Date()
                    };
                    
                    setMessages(prev => [...prev, completionMessage]);
                    notifications.success('G√©n√©ration r√©ussie', `${filesList.length} fichier(s) cr√©√©(s) !`);
                  }
                } catch (error) {
                  console.error('‚ùå Erreur r√©cup√©ration fichiers:', error);
                }
              }, 1000);
            }
          } catch (error) {
            console.error('‚ùå Erreur parsing WebSocket:', error);
          }
        };
        
        ultraWs.onclose = () => {
          console.log('üåä WebSocket ferm√©');
          setIsWorkflowRunning(false);
        };
        
      }
    } catch (error) {
      console.error('‚ùå Erreur lancement Agent D√©veloppeur IA:', error);
      setIsWorkflowRunning(false);
      notifications.error('Erreur', 'Impossible de lancer l\'Agent D√©veloppeur IA');
    }
  };
  
  // Ancien code supprim√© - maintenant on utilise toujours le Chef d'Orchestre
  
  const oldStartWorkflowCode = async () => {
    // Ancien code d√©plac√© ici pour r√©f√©rence mais non utilis√©
    try {
      // Essayer d'abord le workflow streaming avanc√©
      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      let workflowStarted = false;
      
      try {
        // ACTIV√â: WebSocket streaming pour le syst√®me ultra-r√©volutionnaire
        console.log('üöÄ STREAMING ACTIV√â: Utilisation du WebSocket ultra-r√©volutionnaire');
        
        // Le streaming WebSocket sera g√©r√© apr√®s la cr√©ation du workflow
        // Ne pas marquer comme d√©marr√© ici pour permettre la cr√©ation
        
      } catch (streamingError) {
        console.log('‚ö†Ô∏è Workflow streaming non disponible, utilisation du fallback');
      }

      // Cr√©er le workflow ultra-r√©volutionnaire
      if (!workflowStarted) {
        try {
          console.log('üöÄ D√©marrage du workflow ultra-r√©volutionnaire...');
          const data = await request('/ultra/workflow/start', {
            method: 'POST',
            body: JSON.stringify({
              prompt: currentInput,
              agent_id: 'quantum_developer'
            })
          });

          if (data && data.success) {
            console.log('üöÄ Workflow ultra-r√©volutionnaire d√©marr√©:', data);
            
            setCurrentWorkflowId(data.workflow_id);
            workflowStarted = true;
            
            // Syst√®me ultra-simple n'a qu'un agent quantum_developer
            const steps = [{
              id: 'step_1',
              name: 'Agent D√©veloppeur IA',
              agent: 'quantum_developer',
              status: 'pending' as const,
              progress: 0
            }];
            
            setWorkflowSteps(steps);
            console.log('üìã √âtape ultra-r√©volutionnaire initialis√©e:', steps);
            
            const workflowMessage: Message = {
              id: (Date.now() + 1).toString(),
              type: 'workflow',
              content: `üöÄ Workflow ultra-r√©volutionnaire d√©marr√© avec quantum_developer...`,
              timestamp: new Date()
            };

            setMessages(prev => [...prev, workflowMessage]);
            
            // Connecter WebSocket IMM√âDIATEMENT pour capturer tout le streaming
            console.log('üåä Connexion WebSocket ultra IMM√âDIATE pour workflow:', data.workflow_id);
            
            // Connecter WebSocket d√®s que le workflow est cr√©√©
            const ultraWs = new WebSocket(`ws://localhost:8011/ultra/ws/${data.workflow_id}`);
            
            ultraWs.onopen = () => {
              console.log('üåä WebSocket ultra connect√© ! En attente du streaming...');
              const wsMessage: Message = {
                id: `ws_connect_${Date.now()}`,
                type: 'system',
                content: 'üåä Streaming temps r√©el activ√© ! En attente de la g√©n√©ration...',
                timestamp: new Date()
              };
              setMessages(prev => [...prev, wsMessage]);
            };
            
            ultraWs.onmessage = (event) => {
              try {
                const wsData = JSON.parse(event.data);
                console.log('üì® üî• STREAM ULTRA RE√áU üî•:', wsData.type, wsData);
                console.log('üì® üî• D√âTAILS COMPLETS üî•:', JSON.stringify(wsData, null, 2));
                
                const streamingMessageId = `streaming_${data.workflow_id}`;
                
                if (wsData.type === 'agent_streaming') {
                  console.log('üü¢ AGENT STREAMING D√âTECT√â !', wsData);
                  
                  // OPTIMISATION: Utiliser un d√©lai pour √©viter les re-renders trop fr√©quents
                  clearTimeout(streamingTimeoutRef.current);
                  
                  // Accumuler le contenu dans un buffer temporaire
                  streamingBufferRef.current += wsData.content || '';
                  const totalLength = wsData.accumulated_length || 0;
                  
                  // Mettre √† jour le progress imm√©diatement (plus fluide)
                  const progressPercent = Math.min(90, Math.floor(totalLength / 50) + 10);
                  setWorkflowSteps(prev => prev.map(step => 
                    step.id === 'step_quantum' ? {
                      ...step,
                      progress: progressPercent,
                      status: 'running'
                    } : step
                  ));
                  
                  // D√©lai de mise √† jour des messages pour √©viter le tremblement
                  streamingTimeoutRef.current = setTimeout(() => {
                    setMessages(prev => {
                      const existingStreamIndex = prev.findIndex(msg => msg.id === streamingMessageId);
                      
                      if (existingStreamIndex >= 0) {
                        // Mettre √† jour avec le buffer accumul√©
                        const updatedMessages = [...prev];
                        const progressInfo = `ü§ñ **${wsData.agent} - G√©n√©ration en cours** (${totalLength} tokens g√©n√©r√©s)\n\n`;
                        
                        updatedMessages[existingStreamIndex] = {
                          ...updatedMessages[existingStreamIndex],
                          content: progressInfo + streamingBufferRef.current,
                          timestamp: new Date(),
                          isStreaming: true
                        };
                        
                        return updatedMessages;
                      } else {
                        // Cr√©er un nouveau message de streaming
                        const newStreamMessage: Message = {
                          id: streamingMessageId,
                          type: 'assistant',
                          content: `ü§ñ **${wsData.agent} - D√©marrage de la g√©n√©ration...**\n\n` + streamingBufferRef.current,
                          timestamp: new Date(),
                          agent: wsData.agent,
                          isStreaming: true
                        };
                        
                        return [...prev, newStreamMessage];
                      }
                    });
                  }, 150); // D√©lai de 150ms pour fluidifier l'animation
                  
                } else if (wsData.type === 'workflow_started') {
                  console.log('üü¢ WORKFLOW STARTED D√âTECT√â !', wsData);
                  // Message de d√©marrage + mise √† jour du progress
                  const startMessage: Message = {
                    id: `workflow_start_${data.workflow_id}`,
                    type: 'workflow',
                    content: `üöÄ Workflow d√©marr√© ! Agent ${wsData.agent} analyse votre demande et g√©n√®re le code...`,
                    timestamp: new Date()
                  };
                  setMessages(prev => [...prev, startMessage]);
                  
                  // Mettre √† jour les √©tapes du workflow avec d√©tails
                  setWorkflowSteps([{
                    id: 'step_quantum',
                    name: `${wsData.agent} - Analyse & G√©n√©ration`,
                    agent: wsData.agent,
                    status: 'running',
                    progress: 10,
                    startTime: new Date()
                  }]);
                  
                } else if (wsData.type === 'workflow_completed') {
                  // Nettoyer les timeouts et buffers
                  clearTimeout(streamingTimeoutRef.current);
                  
                  // Marquer le streaming comme termin√© avec le contenu final
                  setMessages(prev => {
                    const updatedMessages = prev.map(msg => {
                      if (msg.id === streamingMessageId) {
                        return {
                          ...msg,
                          content: `ü§ñ **${wsData.agent} - G√©n√©ration termin√©e ‚úì**\n\n` + streamingBufferRef.current + '\n\n‚úÖ **Extraction des fichiers...**',
                          isStreaming: false
                        };
                      }
                      return msg;
                    });
                    
                    // Ajouter message de completion d√©taill√© et styl√©
                    const fileCount = wsData.files_count || 0;
                    const completionMessage: Message = {
                      id: `workflow_complete_${data.workflow_id}`,
                      type: 'system',
                      content: `üéâ **G√©n√©ration termin√©e !** ‚ö°\n\n` +
                               `üìÅ **${fileCount} fichier${fileCount !== 1 ? 's' : ''} cr√©√©${fileCount !== 1 ? 's' : ''}**\n` +
                               `üé¨ **Preview automatique en cours...**\n` +
                               `üöÄ **Basculez vers l'onglet Preview Live !**`,
                      timestamp: new Date()
                    };
                    
                    return [...updatedMessages, completionMessage];
                  });
                  
                  // Finaliser le progress
                  setWorkflowSteps(prev => prev.map(step => 
                    step.id === 'step_quantum' ? {
                      ...step,
                      progress: 100,
                      status: 'completed',
                      endTime: new Date()
                    } : step
                  ));
                  
                  // üé¨ G√âN√âRATION AUTOMATIQUE DE PREVIEW
                  setTimeout(async () => {
                    try {
                      console.log('üé¨ R√©cup√©ration automatique des fichiers pour preview...');
                      const filesResponse = await request(`/ultra/workflow/${data.workflow_id}/files`);
                      
                      if (filesResponse?.files && Object.keys(filesResponse.files).length > 0) {
                        console.log('üé¨ G√©n√©ration preview automatique...');
                        const previewHtml = generatePreviewHTMLFromFiles(filesResponse.files);
                        setPreviewContent(previewHtml);
                        setShowPreview(true);
                        
                        // Basculer automatiquement vers l'onglet Preview
                        setEditorView('preview');
                        
                        // Ajouter les fichiers √† l'√©diteur et au file explorer
                        const allFiles: Record<string, any> = {};
                        Object.entries(filesResponse.files).forEach(([path, file]: [string, any]) => {
                          allFiles[path] = {
                            content: file.content,
                            language: file.language
                          };
                        });
                        
                        setProjectFiles(allFiles);
                        
                        // S√©lectionner le premier fichier par d√©faut
                        const firstFile = Object.keys(filesResponse.files)[0];
                        if (firstFile) {
                          setSelectedFile(firstFile);
                          setGeneratedCode(filesResponse.files[firstFile].content);
                          setCodeLanguage(filesResponse.files[firstFile].language);
                        }
                        
                        console.log('‚úÖ Preview automatique g√©n√©r√©e et affich√©e !');
                        
                        // Message de confirmation
                        const previewMessage: Message = {
                          id: `preview_ready_${Date.now()}`,
                          type: 'system',
                          content: `üé¨ Preview automatique g√©n√©r√©e ! Basculez vers l'onglet "Preview Live" pour voir le r√©sultat.`,
                          timestamp: new Date()
                        };
                        setMessages(prev => [...prev, previewMessage]);
                        
                      } else {
                        console.warn('‚ö†Ô∏è Aucun fichier trouv√© pour la preview');
                      }
                    } catch (error) {
                      console.error('‚ùå Erreur g√©n√©ration preview automatique:', error);
                    }
                  }, 1000); // Attendre 1 seconde pour que le workflow soit vraiment termin√©
                  
                } else if (wsData.type === 'workflow_error') {
                  console.error('‚ùå STREAMING ERROR D√âTAILS:', wsData);
                  // Marquer le streaming comme en erreur
                  setMessages(prev => {
                    const updatedMessages = prev.map(msg => {
                      if (msg.id === streamingMessageId) {
                        return {
                          ...msg,
                          content: msg.content + `\n\n‚ùå **Erreur:** ${wsData.error}`,
                          isStreaming: false
                        };
                      }
                      return msg;
                    });
                    
                    return updatedMessages;
                  });
                }
                
              } catch (e) {
                console.error('‚ùå ERREUR WEBSOCKET ‚ùå:', e);
                console.error('‚ùå EVENT DATA ‚ùå:', event.data);
              }
            };
            
            ultraWs.onclose = () => {
              console.log('üîå WebSocket ultra ferm√©');
              // Nettoyer les r√©f√©rences au nettoyage
              clearTimeout(streamingTimeoutRef.current);
              streamingBufferRef.current = '';
            };
            
            ultraWs.onerror = (error) => {
              console.error('‚ùå Erreur WebSocket ultra:', error);
            };
            
            // D√©marrer aussi le polling de backup
            console.log('üì° D√©marrage du polling ultra pour workflow:', data.workflow_id);
            pollWorkflowSimple(data.workflow_id);
          }
        } catch (classicError) {
          console.error('Erreur workflow classique:', classicError);
        }
      }

      // Si ni streaming ni classique ne fonctionne, utiliser le chat simple
      if (!workflowStarted) {
        try {
          const data = await request('/ultra/chat', {
            method: 'POST',
            body: JSON.stringify({
              message: currentInput,
              agent: 'project_orchestrator'
            })
          });
          
          const chatMessage: Message = {
            id: (Date.now() + 1).toString(),
            type: 'assistant',
            content: data.response,
            timestamp: new Date(),
            agent: 'frontend',
            isCode: data.response.includes('```') || data.response.includes('<') || data.response.includes('function') || data.response.includes('const ') || data.response.includes('import ')
          };

          setMessages(prev => [...prev, chatMessage]);
          
          // Toujours afficher Monaco Editor pour les tests
          setShowWorkflowPanel(true);
          setShowCodeEditor(true);
          
          // Si la r√©ponse contient du code, l'ajouter √† l'√©diteur Monaco
          if (chatMessage.isCode) {
            setGeneratedCode(data.response);
            setShowCodeEditor(true);
            
            const codeMessage: Message = {
              id: (Date.now() + 2).toString(),
              type: 'system',
              content: 'üìù Code d√©tect√© et affich√© dans l\'√©diteur ci-dessus.',
              timestamp: new Date()
            };
            setMessages(prev => [...prev, codeMessage]);
          } else {
            // M√™me sans code, afficher l'√©diteur pour les tests
            setGeneratedCode(prev => prev + '\n\n// === Nouvelle r√©ponse ===\n' + data.response);
            setShowCodeEditor(true);
            
            // G√©n√©rer un preview HTML si possible
            if (data.response.includes('React') || data.response.includes('component')) {
              setPreviewContent(generatePreviewHTML(data.response));
              setShowPreview(true);
            }
            
            const editorMessage: Message = {
              id: (Date.now() + 2).toString(),
              type: 'system',
              content: 'üìù √âditeur de code disponible ci-dessus.',
              timestamp: new Date()
            };
            setMessages(prev => [...prev, editorMessage]);
          }
          
          currentNotificationId && notifications.notifyWorkflowComplete(currentNotificationId, 'Chat simple', true);
        } catch (chatError) {
          console.error('Erreur chat simple:', chatError);
          currentNotificationId && notifications.notifyWorkflowComplete(currentNotificationId, 'Chat simple', false);
        }
        
        setIsWorkflowRunning(false);
      } else {
        // Workflow d√©marr√© avec succ√®s
        notifications.success('Workflow d√©marr√©', 'Les agents sp√©cialis√©s travaillent sur votre demande');
      }

    } catch (error) {
      console.error('Erreur d√©marrage workflow:', error);
      
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'system',
        content: `‚ùå Erreur: ${error instanceof Error ? error.message : 'Impossible de d√©marrer le workflow'}`,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, errorMessage]);
      currentNotificationId && notifications.notifyWorkflowComplete(currentNotificationId, 'Workflow', false);
      setIsWorkflowRunning(false);
    }
  };
  
  // Fonction pour d√©marrer le workflow apr√®s les questions
  const simulateWorkflowProgress = async (workflowId: string, steps: WorkflowStep[]) => {
    try {
      console.log('üöÄ D√©marrage polling workflow:', workflowId);
      
      // Polling simple et efficace
      let workflowCompleted = false;
      let pollAttempts = 0;
      const maxPollAttempts = 60; // 2 minutes max
      
      while (!workflowCompleted && pollAttempts < maxPollAttempts) {
        pollAttempts++;
        
        try {
          const status = await request(`/ultra/workflow/${workflowId}/status`);
          console.log(`üìä Poll ${pollAttempts}: workflow status:`, status);
          
          if (status.steps) {
            // Mettre √† jour l'√©tat des √©tapes
            status.steps.forEach((backendStep: any, index: number) => {
              const stepId = `step_${index + 1}`;
              
              setWorkflowSteps(prev => prev.map(s => 
                s.id === stepId ? {
                  ...s,
                  status: backendStep.status === 'done' ? 'completed' :
                          backendStep.status === 'in_progress' ? 'running' : 
                          backendStep.status === 'error' ? 'error' : s.status,
                  progress: backendStep.status === 'done' ? 100 : 
                           backendStep.status === 'in_progress' ? 50 : s.progress
                } : s
              ));
              
              // Ajouter le r√©sultat s'il existe et n'a pas √©t√© ajout√©
              if (backendStep.status === 'done' && backendStep.result) {
                const resultMessage: Message = {
                  id: `result_${workflowId}_${index}`,
                  type: 'assistant',
                  content: backendStep.result,
                  timestamp: new Date(),
                  agent: backendStep.agent,
                  isCode: backendStep.result.includes('```') || backendStep.result.includes('import ') || backendStep.result.includes('const ')
                };
                
                // V√©rifier si ce message n'existe pas d√©j√†
                setMessages(prev => {
                  const exists = prev.some(msg => msg.id === resultMessage.id);
                  if (!exists) {
                    return [...prev, resultMessage];
                  }
                  return prev;
                });
                
                // Ajouter le code √† l'√©diteur si c'est du code
                if (resultMessage.isCode) {
                  setGeneratedCode(prev => {
                    if (!prev.includes(backendStep.result)) {
                      return prev + '\n\n' + backendStep.result;
                    }
                    return prev;
                  });
                  setShowCodeEditor(true);
                }
              }
            });
          }
          
          // V√©rifier si le workflow est termin√© (syst√®me ultra)
          if (status.state === 'completed') {
            workflowCompleted = true;
            console.log('‚úÖ Workflow termin√© avec succ√®s !');
            
            // R√©cup√©rer les fichiers g√©n√©r√©s et g√©n√©rer la preview
            try {
              const filesResponse = await request(`/ultra/workflow/${workflowId}/files`);
              if (filesResponse.files && Object.keys(filesResponse.files).length > 0) {
                console.log('üìÅ Fichiers r√©cup√©r√©s:', Object.keys(filesResponse.files));
                
                // Combiner tous les fichiers avec des s√©parateurs clairs pour Monaco
                const allCode = Object.entries(filesResponse.files)
                  .map(([filename, fileData]: [string, any]) => 
                    `// =================== ${filename} ===================\n${fileData.content || ''}`
                  ).join('\n\n');
                
                setGeneratedCode(allCode);
                setShowCodeEditor(true);
                
                // Stocker les fichiers du projet pour l'explorateur
                setProjectFiles(filesResponse.files);
                
                // G√©n√©rer automatiquement la preview avec tous les fichiers
                console.log('üé¨ G√©n√©ration preview automatique...');
                const previewHtml = generatePreviewHTMLFromFiles(filesResponse.files);
                setPreviewContent(previewHtml);
                setShowPreview(true);
                
                // S√©lectionner le premier fichier par d√©faut
                const firstFile = Object.keys(filesResponse.files)[0];
                if (firstFile) {
                  setSelectedFile(firstFile);
                  setGeneratedCode(filesResponse.files[firstFile].content);
                }
                
                const filesMessage: Message = {
                  id: `files_${workflowId}`,
                  type: 'system',
                  content: `üìÅ ${Object.keys(filesResponse.files).length} fichiers g√©n√©r√©s ! Code affich√© dans l'√©diteur et preview g√©n√©r√©e.`,
                  timestamp: new Date()
                };
                
                setMessages(prev => {
                  const exists = prev.some(msg => msg.id === filesMessage.id);
                  return exists ? prev : [...prev, filesMessage];
                });
              }
            } catch (filesError) {
              console.warn('Erreur r√©cup√©ration fichiers:', filesError);
            }
            
            // Message final styl√©
            const completionMessage: Message = {
              id: `completion_${workflowId}`,
              type: 'system',
              content: 'üéâ **Projet cr√©√© avec brio !** ‚ú®\n\nü§ñ **L\'IA r√©volutionnaire a fait des merveilles !**\nüéØ **Consultez votre code dans l\'√©diteur Monaco**',
              timestamp: new Date()
            };
            
            setMessages(prev => {
              const exists = prev.some(msg => msg.id === completionMessage.id);
              return exists ? prev : [...prev, completionMessage];
            });
            
            break;
          }
          
        } catch (pollError) {
          console.warn(`Erreur poll ${pollAttempts}:`, pollError);
        }
        
        // Attendre avant le prochain poll
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
      
      if (!workflowCompleted) {
        console.warn('‚ö†Ô∏è Workflow timeout apr√®s', maxPollAttempts * 2, 'secondes');
      }
      
      setIsWorkflowRunning(false);
      currentNotificationId && notifications.notifyWorkflowComplete(currentNotificationId, 'Workflow', workflowCompleted);
      
    } catch (error) {
      console.error('Erreur simulation workflow:', error);
      setIsWorkflowRunning(false);
      currentNotificationId && notifications.notifyWorkflowComplete(currentNotificationId, 'Workflow', false);
    }
  };

  // Version simplifi√©e du polling workflow
  const pollWorkflowSimple = async (workflowId: string) => {
    console.log('üöÄ D√©marrage polling simple:', workflowId);
    
    let pollAttempts = 0;
    const maxPollAttempts = 60;
    
    const pollInterval = setInterval(async () => {
      pollAttempts++;
      
      // Arr√™ter si trop de tentatives
      if (pollAttempts > maxPollAttempts) {
        console.log('‚è∞ Arr√™t du polling: trop de tentatives');
        clearInterval(pollInterval);
        setIsWorkflowRunning(false);
        return;
      }
      
      try {
        console.log(`üîç Tentative ${pollAttempts}: Appel API /workflows/${workflowId}/status`);
        const status = await request(`/ultra/workflow/${workflowId}/status`);
        console.log(`üìä Status RE√áU:`, status);
        console.log(`üìä Type de status:`, typeof status);
        console.log(`üìä status.agents_planned:`, status?.agents_planned);
        console.log(`üìä status.current_agent:`, status?.current_agent);
        console.log(`üìä status.state:`, status?.state);
        
        if (status.agents_planned) {
          console.log('üéØ Backend agents planned:', status.agents_planned);
          
          // Cr√©er les √©tapes √† partir des agents planifi√©s
          setWorkflowSteps(status.agents_planned.map((agent: string, index: number) => ({
            id: `step_${index}`,
            name: agent,
            agent: agent,
            status: index < (status.current_agent_index || 0) ? 'completed' :
                    index === (status.current_agent_index || 0) && status.status === 'running' ? 'running' :
                    index === (status.current_agent_index || 0) && status.status === 'completed' ? 'completed' : 'pending',
            progress: index < (status.current_agent_index || 0) ? 100 :
                     index === (status.current_agent_index || 0) && status.status === 'running' ? 50 :
                     index === (status.current_agent_index || 0) && status.status === 'completed' ? 100 : 0,
            error: undefined
          })));
          
          console.log('üìã √âtapes mises √† jour √† partir du backend');
        }
        
        // V√©rifier si le workflow est termin√© (syst√®me ultra)
        if (status.state === 'completed') {
          clearInterval(pollInterval);
          
          console.log('‚úÖ Workflow termin√© avec succ√®s !');
          setIsWorkflowRunning(false);
          
          // R√©cup√©rer le vrai code g√©n√©r√© par les agents avec retry
          let retryCount = 0;
          const maxRetries = 5;
          
          const fetchFilesWithRetry = async () => {
            try {
              const filesResponse = await request(`/ultra/workflow/${workflowId}/files`);
              console.log('üìÅ Fichiers g√©n√©r√©s par les agents:', filesResponse);
              
              if (filesResponse.files && Object.keys(filesResponse.files).length > 0) {
                // Stocker les fichiers du projet pour l'explorateur
                setProjectFiles(filesResponse.files);
                
                // Utiliser le vrai code g√©n√©r√© - TOUS LES FICHIERS
                const files = filesResponse.files;
                
                // Combiner tous les fichiers avec s√©parateurs clairs pour l'affichage g√©n√©ral
                const allCode = Object.entries(files)
                  .map(([filename, fileData]: [string, any]) => 
                    `// =================== ${filename} ===================\n${fileData.content || ''}`
                  ).join('\n\n');
                
                setGeneratedCode(allCode);
                setCodeLanguage('typescript');
                
                // S√©lectionner le premier fichier par d√©faut dans l'explorateur
                const firstFile = Object.keys(files)[0];
                if (firstFile) {
                  setSelectedFile(firstFile);
                }
                
                // G√©n√©rer automatiquement la preview
                console.log('üé¨ G√©n√©ration preview automatique...');
                const previewHtml = generatePreviewHTMLFromFiles(files);
                setPreviewContent(previewHtml);
                setShowPreview(true);
                
                console.log('üéÆ TOUS les fichiers des agents charg√©s dans Monaco et explorateur !');
                return true;
              } else if (retryCount < maxRetries) {
                console.log(`‚ö†Ô∏è Aucun fichier g√©n√©r√©, retry ${retryCount + 1}/${maxRetries} dans 2s...`);
                retryCount++;
                setTimeout(fetchFilesWithRetry, 2000);
                return false;
              } else {
                console.log('‚ùå Aucun fichier g√©n√©r√© apr√®s tous les retries');
                return false;
              }
            } catch (fileError) {
              console.error('Erreur r√©cup√©ration fichiers agents:', fileError);
              if (retryCount < maxRetries) {
                retryCount++;
                setTimeout(fetchFilesWithRetry, 2000);
                return false;
              }
              return false;
            }
          };
          
          await fetchFilesWithRetry();
          
          // Fallback d√©sactiv√© - utiliser SEULEMENT les vrais fichiers g√©n√©r√©s
          // Le syst√®me ultra-r√©volutionnaire g√©n√®re toujours des fichiers de qualit√©
          if (false) {
            // Version HTML/CSS/JS pour la preview
            const snakeGameHTML = `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .game-container {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
            font-size: 2.5em;
        }
        .score-box {
            background: #4CAF50;
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
            display: inline-block;
        }
        #gameBoard {
            border: 3px solid #333;
            background: #f0f0f0;
            margin: 0 auto;
        }
        .controls {
            margin-top: 20px;
            color: #666;
            font-size: 16px;
        }
        .game-over {
            background: #ff4444;
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
            display: none;
        }
        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
        }
        button:hover {
            background: #45a049;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>üêç Snake Game</h1>
        <div class="score-box">
            Score: <span id="score">0</span>
        </div>
        <canvas id="gameBoard" width="400" height="400"></canvas>
        <div class="controls">
            Utilisez les fl√®ches du clavier pour jouer
        </div>
        <div id="gameOver" class="game-over">
            <h2>Game Over!</h2>
            <button onclick="resetGame()">Rejouer</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameBoard');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const gameOverElement = document.getElementById('gameOver');

        const gridSize = 20;
        const tileCount = canvas.width / gridSize;

        let snake = [
            {x: 10, y: 10}
        ];
        let food = {x: 15, y: 15};
        let dx = 0;
        let dy = 0;
        let score = 0;
        let gameRunning = true;

        function drawGame() {
            clearCanvas();
            
            if (gameRunning) {
                moveSnake();
                checkGameOver();
                checkFoodCollision();
            }
            
            drawFood();
            drawSnake();
        }

        function clearCanvas() {
            ctx.fillStyle = '#f0f0f0';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        function drawSnake() {
            ctx.fillStyle = '#4CAF50';
            snake.forEach(part => {
                ctx.fillRect(part.x * gridSize, part.y * gridSize, gridSize - 2, gridSize - 2);
            });
        }

        function drawFood() {
            ctx.fillStyle = '#FF5722';
            ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 2, gridSize - 2);
        }

        function moveSnake() {
            const head = {x: snake[0].x + dx, y: snake[0].y + dy};
            snake.unshift(head);

            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreElement.textContent = score;
                generateFood();
            } else {
                snake.pop();
            }
        }

        function generateFood() {
            food = {
                x: Math.floor(Math.random() * tileCount),
                y: Math.floor(Math.random() * tileCount)
            };
        }

        function checkGameOver() {
            const head = snake[0];
            
            // Collision avec les murs
            if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                gameOver();
                return;
            }
            
            // Collision avec soi-m√™me
            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    gameOver();
                    return;
                }
            }
        }

        function gameOver() {
            gameRunning = false;
            gameOverElement.style.display = 'block';
        }

        function resetGame() {
            snake = [{x: 10, y: 10}];
            food = {x: 15, y: 15};
            dx = 0;
            dy = 0;
            score = 0;
            scoreElement.textContent = score;
            gameRunning = true;
            gameOverElement.style.display = 'none';
        }

        document.addEventListener('keydown', (e) => {
            if (!gameRunning) return;
            
            switch(e.key) {
                case 'ArrowUp':
                    if (dy !== 1) { dx = 0; dy = -1; }
                    break;
                case 'ArrowDown':
                    if (dy !== -1) { dx = 0; dy = 1; }
                    break;
                case 'ArrowLeft':
                    if (dx !== 1) { dx = -1; dy = 0; }
                    break;
                case 'ArrowRight':
                    if (dx !== -1) { dx = 1; dy = 0; }
                    break;
            }
        });

        // D√©marrer le jeu
        setInterval(drawGame, 150);
    </script>
</body>
</html>`;

            // Version React pour Monaco
            const snakeGameCode = `// Jeu Snake avec Score
import React, { useState, useEffect, useCallback } from 'react';

interface Position {
  x: number;
  y: number;
}

const SnakeGame: React.FC = () => {
  const [snake, setSnake] = useState<Position[]>([{ x: 10, y: 10 }]);
  const [food, setFood] = useState<Position>({ x: 5, y: 5 });
  const [direction, setDirection] = useState<Position>({ x: 0, y: -1 });
  const [gameOver, setGameOver] = useState(false);
  const [score, setScore] = useState(0);

  const moveSnake = useCallback(() => {
    if (gameOver) return;

    setSnake(currentSnake => {
      const newSnake = [...currentSnake];
      const head = { ...newSnake[0] };
      head.x += direction.x;
      head.y += direction.y;

      // V√©rifier les collisions avec les murs
      if (head.x < 0 || head.x >= 20 || head.y < 0 || head.y >= 20) {
        setGameOver(true);
        return currentSnake;
      }

      // V√©rifier les collisions avec soi-m√™me
      if (newSnake.some(segment => segment.x === head.x && segment.y === head.y)) {
        setGameOver(true);
        return currentSnake;
      }

      newSnake.unshift(head);

      // V√©rifier si on mange la nourriture
      if (head.x === food.x && head.y === food.y) {
        setScore(prev => prev + 10);
        setFood({
          x: Math.floor(Math.random() * 20),
          y: Math.floor(Math.random() * 20)
        });
      } else {
        newSnake.pop();
      }

      return newSnake;
    });
  }, [direction, food, gameOver]);

  useEffect(() => {
    const handleKeypress = (e: KeyboardEvent) => {
      switch (e.key) {
        case 'ArrowUp':
          setDirection({ x: 0, y: -1 });
          break;
        case 'ArrowDown':
          setDirection({ x: 0, y: 1 });
          break;
        case 'ArrowLeft':
          setDirection({ x: -1, y: 0 });
          break;
        case 'ArrowRight':
          setDirection({ x: 1, y: 0 });
          break;
      }
    };

    document.addEventListener('keydown', handleKeypress);
    return () => document.removeEventListener('keydown', handleKeypress);
  }, []);

  useEffect(() => {
    const interval = setInterval(moveSnake, 100);
    return () => clearInterval(interval);
  }, [moveSnake]);

  return (
    <div style={{ textAlign: 'center', padding: '20px' }}>
      <h1>Snake Game</h1>
      <div style={{ 
        marginBottom: '20px', 
        fontSize: '24px', 
        fontWeight: 'bold',
        padding: '10px',
        backgroundColor: '#f0f0f0',
        borderRadius: '8px',
        display: 'inline-block'
      }}>
        Score: {score}
      </div>
      
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(20, 20px)',
        gridTemplateRows: 'repeat(20, 20px)',
        gap: '1px',
        backgroundColor: '#ccc',
        padding: '10px',
        margin: '0 auto',
        width: 'fit-content'
      }}>
        {Array.from({ length: 400 }, (_, i) => {
          const x = i % 20;
          const y = Math.floor(i / 20);
          const isSnake = snake.some(segment => segment.x === x && segment.y === y);
          const isFood = food.x === x && food.y === y;
          
          return (
            <div
              key={i}
              style={{
                width: '20px',
                height: '20px',
                backgroundColor: isSnake ? '#4CAF50' : isFood ? '#FF5722' : '#fff',
                border: '1px solid #ddd'
              }}
            />
          );
        })}
      </div>
      
      {gameOver && (
        <div style={{ marginTop: '20px' }}>
          <h2>Game Over!</h2>
          <button onClick={() => window.location.reload()}>
            Rejouer
          </button>
        </div>
      )}
      
      <div style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>
        Utilisez les fl√®ches du clavier pour jouer
      </div>
    </div>
  );
};

export default SnakeGame;`;

            // Envoyer les deux versions
            setGeneratedCode(snakeGameCode); // Version React pour Monaco
            setShowCodeEditor(true);
            
            // G√©n√©rer √©galement du HTML pour la preview qui fonctionne
            setGeneratedHtml(snakeGameHTML);
            setShowPreview(true); // Activer automatiquement la preview
            
            console.log('üéÆ Code Snake g√©n√©r√©: React pour Monaco + HTML pour Preview');
          }
          
          // Message de succ√®s styl√© et informatif
          const fileCount = status.files?.length || Object.keys(projectFiles).length || 0;
          const promptText = status.prompt || input || 'G√©n√©ration de code';
          
          const emojiForPrompt = getEmojiForPrompt(promptText);
          const messageType = getProjectType(promptText);
          
          const successMsg: Message = {
            id: `success_${workflowId}`,
            type: 'assistant',
            content: `üéâ **${messageType} cr√©√© avec succ√®s !** ${emojiForPrompt}\n\n` +
                     `üí¨ **Demande :** ${promptText}\n` +
                     `üìÅ **Fichiers g√©n√©r√©s :** ${fileCount} fichier${fileCount !== 1 ? 's' : ''}\n` +
                     `‚ö° **Agent :** Agent D√©veloppeur IA (IA r√©volutionnaire)\n` +
                     `üéØ **Statut :** G√©n√©ration termin√©e\n\n` +
                     `üöÄ **Votre code est pr√™t !** Consultez l'√©diteur Monaco et la preview live.`,
            timestamp: new Date(),
            agent: 'syst√®me',
            isCode: false
          };
          
          setMessages(prev => [...prev, successMsg]);
          
          // R√©cup√©rer les fichiers si disponibles
          try {
            const filesResponse = await request(`/ultra/workflow/${workflowId}/files`);
            if (filesResponse.files) {
              const allCode = Object.entries(filesResponse.files)
                .map(([filename, fileData]: [string, any]) => 
                  `// ${filename}\n${fileData.content || ''}`
                ).join('\n\n');
              
              if (allCode.trim()) {
                setGeneratedCode(allCode);
                setShowCodeEditor(true);
              }
            }
          } catch (e) {
            console.warn('Erreur fichiers:', e);
          }
          
          const completionMsg: Message = {
            id: `completion_${workflowId}`,
            type: 'system',
            content: 'üéâ Workflow termin√© ! V√©rifiez l\'√©diteur de code pour voir les r√©sultats.',
            timestamp: new Date()
          };
          
          setMessages(prev => [...prev, completionMsg]);
          setIsWorkflowRunning(false);
        }
        
      } catch (error) {
        console.error('Erreur polling:', error);
      }
    }, 3000); // Poll toutes les 3 secondes
    
    // Timeout apr√®s 2 minutes
    setTimeout(() => {
      clearInterval(pollInterval);
      setIsWorkflowRunning(false);
    }, 120000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      startWorkflow();
    }
  };

  // G√©n√©rer un preview HTML √† partir du code (VERSION AM√âLIOR√âE)
  const generatePreviewHTML = (code: string): string => {
    try {
      console.log('üé¨ G√©n√©ration preview am√©lior√©e pour:', code.substring(0, 200));
      
      // Si c'est du HTML direct, le retourner tel quel
      if (code.includes('<!DOCTYPE') || code.includes('<html')) {
        console.log('üé¨ HTML direct d√©tect√©');
        return code;
      }
      
      // Analyser le type de code pour choisir la meilleure preview
      const codeContent = code.toLowerCase();
      if (codeContent.includes('restaurant') || codeContent.includes('menu') || codeContent.includes('sushi')) {
        return createRestaurantPreview('');
      } else if (codeContent.includes('todo') || codeContent.includes('task')) {
        return createTodoPreview('');
      } else if (codeContent.includes('snake') || codeContent.includes('game')) {
        return createSnakePreview('');
      }
      
      // Pour tout le reste, cr√©er une preview React am√©lior√©e
      return createGenericReactPreview('Generated', code, '', { 'main.tsx': { content: code } });
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration preview:', error);
      return createGenericReactPreview('Error', '// Erreur de g√©n√©ration', '', {});
    }
  };

  // üöÄ SYST√àME SIMPLE QUI MARCHE VRAIMENT üöÄ
  const generatePreviewHTMLFromFiles = (files: Record<string, any>): string => {
    try {
      console.log('üöÄ G√âN√âRATION PREVIEW SIMPLE - Analyse des fichiers:', Object.keys(files));
      
      return generatePreviewFromFiles(files);
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration preview:', error);
      return generatePreviewHTML('// Erreur lors de la g√©n√©ration de la preview');
    }
  };

  // üéØ G√©n√©rateur de preview qui marche vraiment (REDIRIG√â VERS NOUVELLE LOGIQUE)
  const generateWorkingPreview = (files: Record<string, any>): string => {
    console.log('üéØ Redirection vers nouvelle logique de preview...');
    
    // Utiliser directement la nouvelle fonction generatePreviewFromFiles
    return generatePreviewFromFiles(files);
  };

  // Ces fonctions ont √©t√© supprim√©es car elles causaient des probl√®mes de chargement
  // Toute la logique de preview est maintenant dans generatePreviewFromFiles et createAdvancedPreview
  
  // üö® Fallback simple en cas d'erreur (REDIRIG√â)
  const generateSimpleFallback = (files: Record<string, any>): string => {
    console.log('üö® Fallback redirig√© vers nouvelle logique');
    return generatePreviewFromFiles(files);
  };

  // Ancienne fonction fallback (gard√©e pour r√©f√©rence mais non utilis√©e)
  const oldGenerateSimpleFallback = (files: Record<string, any>): string => {
    const filesList = Object.entries(files).map(([path, file]) => 
      `<div style="margin: 15px 0; padding: 20px; border: 1px solid #e2e8f0; border-radius: 8px; background: #f8fafc;">
        <h3 style="margin: 0 0 10px 0; color: #2d3748;">${path}</h3>
        <pre style="background: #ffffff; padding: 15px; border-radius: 6px; overflow-x: auto; font-size: 13px; line-height: 1.4; border: 1px solid #e2e8f0;">${file.content.substring(0, 500)}${file.content.length > 500 ? '...' : ''}</pre>
      </div>`
    ).join('');

    return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìÅ Fichiers G√©n√©r√©s</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0; 
            padding: 20px; 
            background: #f7fafc; 
        }
        .container { 
            max-width: 1000px; 
            margin: 0 auto; 
            background: white; 
            border-radius: 12px; 
            padding: 30px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        h1 { color: #2d3748; margin-bottom: 20px; }
        .status { 
            background: #edf2f7; 
            padding: 15px; 
            border-radius: 8px; 
            margin-bottom: 25px; 
            color: #4a5568;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìÅ Fichiers G√©n√©r√©s par l'IA</h1>
        <div class="status">
            üöÄ Le syst√®me de compilation intelligent est en cours de perfectionnement...
            <br>En attendant, voici les fichiers bruts g√©n√©r√©s.
        </div>
        ${filesList}
        <div style="margin-top: 30px; padding: 20px; background: #e6fffa; border: 1px solid #81e6d9; border-radius: 8px; color: #234e52;">
            üí° <strong>Prochainement :</strong> Preview interactive compl√®te avec compilation en temps r√©el !
        </div>
    </div>
</body>
</html>`;
  };


  // G√©n√©rer une preview intelligente √† partir des fichiers du workflow
  const generatePreviewFromFiles = (files: Record<string, any>): string => {
    try {
      console.log('üé¨ G√©n√©ration preview depuis fichiers:', Object.keys(files));
      
      // Trouver le fichier principal TSX
      const tsxFiles = Object.entries(files).filter(([path]) => 
        path.includes('.tsx') && !path.includes('.css'));
      
      if (tsxFiles.length === 0) {
        console.warn('‚ö†Ô∏è Aucun fichier TSX trouv√©');
        return generatePreviewHTML('// Aucun composant React trouv√©');
      }
      
      // Chercher le composant principal
      let mainComponent = tsxFiles.find(([path]) => 
        path.includes('App.tsx') || 
        path.includes('RestaurantApp.tsx') ||
        path.includes('SnakeGame.tsx')
      );
      
      if (!mainComponent) {
        mainComponent = tsxFiles.find(([path, file]) => 
          file.content && file.content.includes('export default')
        );
      }
      
      if (!mainComponent && tsxFiles.length > 0) {
        mainComponent = tsxFiles[0];
      }
      
      if (!mainComponent) {
        console.warn('‚ö†Ô∏è Aucun composant principal trouv√©');
        return generatePreviewHTML('// Aucun composant principal d√©tect√©');
      }
      
      const [mainPath, mainFile] = mainComponent;
      console.log('üéØ Composant principal:', mainPath);
      
      // Extraire le nom du composant
      const componentMatch = mainFile.content.match(/(?:const|function)\s+(\w+)(?:\s*:|:?\s*React\.FC)/);
      const componentName = componentMatch ? componentMatch[1] : 'App';
      
      // Collecter tous les CSS
      const cssFiles = Object.entries(files).filter(([path]) => 
        path.includes('.css') || path.endsWith('.css'));
      
      const allCss = cssFiles.map(([path, file]) => file.content).join('\n\n');
      
      // G√©n√©rer la preview HTML finale avec bundling am√©lior√©
      return createAdvancedPreview(componentName, mainFile.content, allCss, files);
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration preview depuis fichiers:', error);
      return generatePreviewHTML('// Erreur de traitement des fichiers');
    }
  };

  // Cr√©er une preview avanc√©e avec bundling intelligent
  const createAdvancedPreview = (componentName: string, mainContent: string, css: string, allFiles: Record<string, any>): string => {
    console.log('üé¨ Cr√©ation preview avanc√©e pour:', componentName);
    console.log('üé¨ Fichiers disponibles:', Object.keys(allFiles));
    
    // Analyser le contenu de tous les fichiers pour d√©tecter le type
    const allContent = Object.values(allFiles).map((file: any) => file.content).join(' ').toLowerCase();
    
    if (allContent.includes('restaurant') || allContent.includes('menu') || allContent.includes('sushi')) {
      return createRestaurantPreview(css);
    } else if (allContent.includes('todo') || allContent.includes('task')) {
      return createTodoPreview(css);
    } else if (allContent.includes('snake') || allContent.includes('game')) {
      return createSnakePreview(css);
    } else {
      // Pour tous les autres cas, cr√©er une preview intelligente bas√©e sur les fichiers r√©els
      return createIntelligentPreview(componentName, allFiles, css);
    }
  };

  // Cr√©er une preview intelligente bas√©e sur l'analyse des fichiers
  const createIntelligentPreview = (componentName: string, allFiles: Record<string, any>, css: string): string => {
    console.log('üé¨ Cr√©ation preview intelligente pour:', componentName);
    
    // Analyser la structure des fichiers
    const hasComponents = Object.keys(allFiles).some(path => path.includes('/components/'));
    const hasStyles = Object.keys(allFiles).some(path => path.includes('.css'));
    
    // Extraire le contenu principal
    let mainComponentContent = '';
    let headerContent = '';
    let menuContent = '';
    let footerContent = '';
    
    // Chercher les diff√©rents composants
    Object.entries(allFiles).forEach(([path, file]: [string, any]) => {
      const content = file.content || '';
      if (path.toLowerCase().includes('header')) {
        headerContent = content;
      } else if (path.toLowerCase().includes('menu')) {
        menuContent = content;
      } else if (path.toLowerCase().includes('footer')) {
        footerContent = content;
      } else if (path.toLowerCase().includes('app') || path.toLowerCase().includes(componentName.toLowerCase())) {
        mainComponentContent = content;
      }
    });
    
    return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Preview - ${componentName}</title>
    <style>
        body { 
            margin: 0; 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
            line-height: 1.6;
        }
        ${css}
        
        /* Styles par d√©faut pour une belle preview */
        .preview-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 3rem 2rem;
            text-align: center;
            border-radius: 12px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            margin: 0 0 1rem 0;
            font-size: 2.5rem;
            font-weight: bold;
        }
        
        .header nav {
            margin-top: 1.5rem;
        }
        
        .header nav a {
            color: white;
            text-decoration: none;
            margin: 0 1.5rem;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            transition: background 0.3s;
            font-weight: 500;
        }
        
        .header nav a:hover {
            background: rgba(255,255,255,0.2);
        }
        
        .main-content {
            background: white;
            padding: 3rem;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .menu, .content-grid {
            display: grid;
            gap: 1.5rem;
            margin: 2rem 0;
        }
        
        .menu-item, .content-item, .card {
            background: #f8f9fa;
            padding: 2rem;
            border-radius: 12px;
            border-left: 4px solid #667eea;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .menu-item:hover, .content-item:hover, .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .footer {
            background: #2d3748;
            color: white;
            padding: 3rem 2rem;
            text-align: center;
            border-radius: 12px;
            margin-top: 3rem;
        }
        
        .demo-message {
            background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
            padding: 2rem;
            border-radius: 12px;
            margin: 2rem 0;
            text-align: center;
            border: 1px solid #e1bee7;
        }
        
        .code-info {
            background: #1e293b;
            color: #e2e8f0;
            padding: 1rem;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            margin: 1rem 0;
            overflow-x: auto;
        }
    </style>
</head>
<body>
    <div class="preview-container">
        <header class="header">
            <h1>üöÄ ${componentName}</h1>
            <p>Preview automatique g√©n√©r√©e √† partir de votre code React</p>
            <nav>
                <a href="#main">Contenu</a>
                <a href="#features">Fonctionnalit√©s</a>
                <a href="#contact">Contact</a>
            </nav>
        </header>
        
        <main class="main-content" id="main">
            <div class="demo-message">
                <h2>‚ú® Composant React G√©n√©r√©</h2>
                <p>Votre composant <strong>${componentName}</strong> a √©t√© cr√©√© avec succ√®s !</p>
                <p>Le code complet est disponible dans l'√©diteur Monaco √† gauche.</p>
            </div>
            
            ${hasComponents ? `
            <div class="content-grid">
                <div class="content-item">
                    <h3>üìÅ Structure des Fichiers</h3>
                    <p>Votre projet contient ${Object.keys(allFiles).length} fichier(s) :</p>
                    <ul style="text-align: left; max-width: 400px; margin: 0 auto;">
                        ${Object.keys(allFiles).map(path => `<li><code>${path}</code></li>`).join('')}
                    </ul>
                </div>
                
                <div class="content-item">
                    <h3>‚öõÔ∏è Composants React</h3>
                    <p>Architecture modulaire avec composants s√©par√©s</p>
                    <div class="code-info">
                        ${headerContent ? '‚úì Header Component' : ''}
                        ${menuContent ? '<br>‚úì Menu Component' : ''}
                        ${footerContent ? '<br>‚úì Footer Component' : ''}
                        <br>‚úì Main ${componentName} Component
                    </div>
                </div>
                
                <div class="content-item">
                    <h3>üé® Styles CSS</h3>
                    <p>${hasStyles ? 'Styles personnalis√©s inclus' : 'Styles par d√©faut appliqu√©s'}</p>
                    <div class="code-info">
                        ‚Ä¢ Responsive design<br>
                        ‚Ä¢ Animations CSS<br>
                        ‚Ä¢ Th√®me moderne
                    </div>
                </div>
            </div>
            ` : `
            <div class="content-item">
                <h3>üéØ Composant G√©n√©r√©</h3>
                <p>Votre composant React est pr√™t √† √™tre utilis√© !</p>
                <div class="code-info">
                    Composant: ${componentName}<br>
                    Type: React Functional Component<br>
                    Langage: TypeScript/JSX
                </div>
            </div>
            `}
            
            <div class="demo-message">
                <h3>üí° Pour voir le composant en action</h3>
                <p>Copiez le code depuis l'√©diteur Monaco et int√©grez-le dans votre projet React.</p>
            </div>
        </main>
        
        <footer class="footer" id="contact">
            <h3>üöÄ Workflow Termin√©</h3>
            <p>Code g√©n√©r√© par l'IA r√©volutionnaire de Mon Atelier IA</p>
            <p>Tous les fichiers sont disponibles dans l'explorateur de fichiers</p>
        </footer>
    </div>
</body>
</html>`;
  };

  // Preview sp√©cialis√©e pour restaurant
  const createRestaurantPreview = (css: string): string => {
    return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Preview - Restaurant</title>
    <style>
        body { 
            margin: 0; 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
        }
        ${css}
        
        .restaurant-app {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background: linear-gradient(135deg, #d32f2f 0%, #b71c1c 100%);
            color: white;
            padding: 3rem;
            text-align: center;
            border-radius: 12px;
            margin-bottom: 2rem;
        }
        .menu {
            display: grid;
            gap: 1.5rem;
            margin: 2rem 0;
        }
        .menu-item {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            border-left: 4px solid #d32f2f;
            transition: transform 0.3s;
        }
        .menu-item:hover {
            transform: translateY(-5px);
        }
        .footer {
            background: #333;
            color: white;
            padding: 2rem;
            text-align: center;
            border-radius: 12px;
            margin-top: 3rem;
        }
    </style>
</head>
<body>
    <div class="restaurant-app">
        <header class="header">
            <h1>üç£ Restaurant Japonais</h1>
            <p>D√©couvrez nos sp√©cialit√©s authentiques</p>
            <nav style="margin-top: 1rem;">
                <a href="#menu" style="color: white; margin: 0 20px; text-decoration: none; font-weight: bold;">Menu</a>
                <a href="#contact" style="color: white; margin: 0 20px; text-decoration: none; font-weight: bold;">Contact</a>
            </nav>
        </header>
        
        <main>
            <section id="menu" class="menu">
                <h2 style="text-align: center; font-size: 2.5rem; margin-bottom: 2rem; color: #333;">Notre Menu</h2>
                <div class="menu-item">
                    <h3 style="color: #d32f2f; font-size: 1.5rem;">üç£ Sushi Premium</h3>
                    <p style="color: #666; margin: 1rem 0;">Assortiment de sushis frais du jour avec saumon, thon et crevettes</p>
                    <span style="font-weight: bold; color: #d32f2f; font-size: 1.3rem;">18‚Ç¨</span>
                </div>
                <div class="menu-item">
                    <h3 style="color: #d32f2f; font-size: 1.5rem;">üçú Ramen Traditionnel</h3>
                    <p style="color: #666; margin: 1rem 0;">Soupe de nouilles riche avec bouillon de porc et ≈ìuf mollet</p>
                    <span style="font-weight: bold; color: #d32f2f; font-size: 1.3rem;">14‚Ç¨</span>
                </div>
                <div class="menu-item">
                    <h3 style="color: #d32f2f; font-size: 1.5rem;">üç§ Tempura</h3>
                    <p style="color: #666; margin: 1rem 0;">Beignets croustillants de crevettes et l√©gumes de saison</p>
                    <span style="font-weight: bold; color: #d32f2f; font-size: 1.3rem;">12‚Ç¨</span>
                </div>
                <div class="menu-item">
                    <h3 style="color: #d32f2f; font-size: 1.5rem;">ü•¢ Bento Complet</h3>
                    <p style="color: #666; margin: 1rem 0;">Assortiment complet avec riz, sashimi, tempura et miso</p>
                    <span style="font-weight: bold; color: #d32f2f; font-size: 1.3rem;">22‚Ç¨</span>
                </div>
            </section>
        </main>
        
        <footer class="footer" id="contact">
            <h3 style="margin-bottom: 1rem;">Contactez-nous</h3>
            <p>üìû 01 23 45 67 89</p>
            <p>üìç 123 Rue de la Gastronomie, 75001 Paris</p>
            <p>üïê Ouvert tous les jours de 12h √† 23h</p>
        </footer>
    </div>
</body>
</html>`;
  };

  // Preview sp√©cialis√©e pour Todo
  const createTodoPreview = (css: string): string => {
    return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Preview - Todo List</title>
    <style>
        body { 
            margin: 0; 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 2rem;
        }
        ${css}
        
        .todo-app {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
        }
        .todo-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: all 0.3s;
        }
        .todo-item:hover {
            background: #f8f9fa;
            transform: translateY(-2px);
        }
        .add-todo {
            display: flex;
            margin-bottom: 2rem;
        }
        .add-todo input {
            flex: 1;
            padding: 0.75rem;
            border: 2px solid #ddd;
            border-radius: 8px;
            margin-right: 0.5rem;
        }
        .add-todo button {
            padding: 0.75rem 1.5rem;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="todo-app">
        <h1 style="text-align: center; color: #333; margin-bottom: 2rem;">üìù Ma Todo List</h1>
        
        <div class="add-todo">
            <input type="text" placeholder="Ajouter une nouvelle t√¢che..." />
            <button>Ajouter</button>
        </div>
        
        <div class="todo-list">
            <div class="todo-item">
                <span>‚úÖ Terminer le projet React</span>
                <button style="background: red; color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 4px;">Supprimer</button>
            </div>
            <div class="todo-item">
                <span>üìö Apprendre TypeScript</span>
                <button style="background: red; color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 4px;">Supprimer</button>
            </div>
            <div class="todo-item">
                <span>üé® Am√©liorer le design</span>
                <button style="background: red; color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 4px;">Supprimer</button>
            </div>
        </div>
        
        <div style="text-align: center; margin-top: 2rem; color: #666;">
            <p>3 t√¢ches ‚Ä¢ Organisez votre travail efficacement</p>
        </div>
    </div>
</body>
</html>`;
  };

  // Preview sp√©cialis√©e pour Snake Game
  const createSnakePreview = (css: string): string => {
    return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Preview - Snake Game</title>
    <style>
        body { 
            margin: 0; 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #1a1a2e;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        ${css}
        
        .game-container {
            text-align: center;
            background: #16213e;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 0 30px rgba(0,255,0,0.3);
        }
        .game-board {
            width: 400px;
            height: 400px;
            background: #0f0f0f;
            border: 2px solid #00ff00;
            margin: 1rem auto;
            position: relative;
            overflow: hidden;
        }
        .snake-segment {
            width: 20px;
            height: 20px;
            background: #00ff00;
            position: absolute;
            border-radius: 2px;
        }
        .food {
            width: 20px;
            height: 20px;
            background: #ff4444;
            position: absolute;
            border-radius: 50%;
        }
        .score {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #00ff00;
        }
        .controls {
            margin-top: 1rem;
            color: #ccc;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 style="color: #00ff00; margin-bottom: 1rem;">üêç Snake Game</h1>
        
        <div class="score">Score: 0</div>
        
        <div class="game-board">
            <div class="snake-segment" style="top: 200px; left: 200px;"></div>
            <div class="snake-segment" style="top: 200px; left: 180px;"></div>
            <div class="snake-segment" style="top: 200px; left: 160px;"></div>
            <div class="food" style="top: 100px; left: 300px;"></div>
        </div>
        
        <div class="controls">
            <p>üéÆ Utilisez les fl√®ches du clavier pour jouer</p>
            <p>üçé Mangez la nourriture rouge pour grandir</p>
            <div style="margin-top: 1rem;">
                <button style="padding: 0.5rem 1rem; margin: 0.25rem; background: #00ff00; color: black; border: none; border-radius: 4px;">Nouvelle Partie</button>
                <button style="padding: 0.5rem 1rem; margin: 0.25rem; background: #ff4444; color: white; border: none; border-radius: 4px;">Pause</button>
            </div>
        </div>
    </div>
</body>
</html>`;
  };

  // Preview g√©n√©rique avec React - VERSION AM√âLIOR√âE AVEC BUNDLING
  const createGenericReactPreview = (componentName: string, mainContent: string, css: string, allFiles: Record<string, any>): string => {
    console.log('üöÄ Cr√©ation preview React avanc√©e pour:', componentName);
    
    // Essayer de cr√©er une preview interactive r√©elle
    try {
      // Nettoyer le contenu React pour enlever les imports
      let cleanContent = mainContent
        .replace(/import[^;]+;/g, '') // Enlever les imports
        .replace(/export\s+default\s+\w+;?/g, '') // Enlever l'export default
        .trim();
      
      // Si le contenu contient une fonction React, essayer de la transformer
      const functionMatch = cleanContent.match(/(const|function)\s+(\w+)\s*[=:]?[^{]*\{([\s\S]*?)\}\s*;?$/);
      
      if (functionMatch) {
        const funcName = functionMatch[2];
        let funcBody = functionMatch[3];
        
        // Transformer le JSX en HTML basique si possible
        if (funcBody.includes('return (') || funcBody.includes('return <')) {
          // Extraire le JSX retourn√©
          const jsxMatch = funcBody.match(/return\s*\(?\s*(<[\s\S]*?>)/m);
          if (jsxMatch) {
            let jsxContent = jsxMatch[1];
            
            // Transformations JSX vers HTML
            jsxContent = jsxContent
              .replace(/className=/g, 'class=')
              .replace(/onClick={[^}]*}/g, 'onclick="void(0)"; style="cursor: pointer;"')
              .replace(/{[^}]*}/g, '') // Enlever les expressions JS
              .replace(/<\/>/g, '') // Enlever les fragments vides
              .replace(/<>/g, '') // Enlever les fragments
              .replace(/\s+/g, ' ') // Nettoyer les espaces
              .trim();
            
            // Si on a un contenu JSX valide, cr√©er une preview interactive
            if (jsxContent && jsxContent.length > 10) {
              return createInteractivePreview(componentName, jsxContent, css);
            }
          }
        }
      }
      
      // Fallback: analyser le type de fichier et cr√©er une preview appropri√©e
      const allContent = Object.values(allFiles).map((file: any) => file.content || '').join(' ').toLowerCase();
      
      if (allContent.includes('restaurant') || allContent.includes('menu') || allContent.includes('sushi')) {
        return createRestaurantPreview(css);
      } else if (allContent.includes('todo') || allContent.includes('task')) {
        return createTodoPreview(css);
      } else if (allContent.includes('snake') || allContent.includes('game')) {
        return createSnakePreview(css);
      }
      
      // Si aucune preview sp√©cifique, cr√©er une preview g√©n√©rique mais avec le vrai contenu
      return createBasicReactPreview(componentName, mainContent, css, allFiles);
      
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation preview avanc√©e:', error);
      return createBasicReactPreview(componentName, mainContent, css, allFiles);
    }
  };
  
  // Cr√©er une preview interactive avec Babel pour transformer le JSX
  const createInteractivePreview = (componentName: string, jsxContent: string, css: string): string => {
    return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Preview Interactive - ${componentName}</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        body { 
            margin: 0; 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
        }
        ${css}
        
        .preview-container {
            min-height: 100vh;
            padding: 2rem;
        }
        
        .preview-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            margin: -2rem -2rem 2rem -2rem;
            border-radius: 0 0 12px 12px;
        }
    </style>
</head>
<body>
    <div id="root">
        <div class="preview-container">
            <div class="preview-header">
                <h1>üöÄ ${componentName} - Preview Interactive</h1>
                <p>Rendu React en temps r√©el avec Babel</p>
            </div>
            <div id="app-container">
                ${jsxContent}
            </div>
        </div>
    </div>
    
    <script type="text/babel">
        const { useState, useEffect } = React;
        
        function App() {
            return (
                <div className="app">
                    ${jsxContent}
                </div>
            );
        }
        
        ReactDOM.render(<App />, document.getElementById('app-container'));
    </script>
</body>
</html>`;
  };
  
  // Preview basique avec affichage du code r√©el (fallback am√©lior√©)
  const createBasicReactPreview = (componentName: string, mainContent: string, css: string, allFiles: Record<string, any>): string => {
    const filesList = Object.entries(allFiles)
      .map(([path, file]: [string, any]) => `
        <div class="file-preview">
            <h3>üìÅ ${path}</h3>
            <pre><code>${(file.content || '').substring(0, 1000)}${(file.content || '').length > 1000 ? '\n\n... (tronqu√©)' : ''}</code></pre>
        </div>
    `).join('');
    
    return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Preview - ${componentName}</title>
    <style>
        body { 
            margin: 0; 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
            line-height: 1.6;
        }
        ${css}
        
        .preview-container {
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .preview-header {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            text-align: center;
        }
        
        .file-preview {
            background: white;
            margin: 1rem 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .file-preview h3 {
            background: #f8fafc;
            margin: 0;
            padding: 1rem;
            border-bottom: 1px solid #e2e8f0;
            color: #374151;
        }
        
        .file-preview pre {
            margin: 0;
            padding: 1.5rem;
            background: #1e293b;
            color: #e2e8f0;
            overflow-x: auto;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .file-preview code {
            font-family: 'Fira Code', 'Monaco', 'Consolas', monospace;
        }
        
        .status-banner {
            background: linear-gradient(90deg, #10b981 0%, #059669 100%);
            color: white;
            padding: 1rem;
            border-radius: 8px;
            margin: 2rem 0;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="preview-container">
        <div class="preview-header">
            <h1>üé® ${componentName}</h1>
            <p>Composant React g√©n√©r√© avec architecture moderne</p>
        </div>
        
        <div class="status-banner">
            <h3>‚úÖ G√©n√©ration R√©ussie!</h3>
            <p>Votre composant React a √©t√© cr√©√© avec TypeScript, hooks modernes et CSS optimis√©</p>
        </div>
        
        <div class="files-section">
            <h2>üìÇ Structure du Projet</h2>
            ${filesList}
        </div>
        
        <div style="background: #dbeafe; padding: 1.5rem; border-radius: 8px; margin-top: 2rem; border-left: 4px solid #3b82f6;">
            <h4 style="margin: 0 0 0.5rem 0; color: #1e40af;">üí° Preview Interactive</h4>
            <p style="margin: 0; color: #1e40af;">Le composant est pr√™t √† √™tre int√©gr√© dans votre application React. Utilisez l'√©diteur Monaco pour voir et modifier le code source.</p>
        </div>
    </div>
</body>
</html>`;
  };

  // Fonctions helper pour les messages styl√©s
  const getEmojiForPrompt = (prompt: string): string => {
    const text = prompt.toLowerCase();
    if (text.includes('restaurant') || text.includes('sushi') || text.includes('japonais')) return 'üç£';
    if (text.includes('todo') || text.includes('task') || text.includes('liste')) return 'üìù';
    if (text.includes('snake') || text.includes('jeu') || text.includes('game')) return 'üêç';
    if (text.includes('e-commerce') || text.includes('shop') || text.includes('boutique')) return 'üõí';
    if (text.includes('portfolio') || text.includes('cv')) return 'üíº';
    if (text.includes('blog') || text.includes('article')) return 'üìñ';
    if (text.includes('dashboard') || text.includes('admin')) return 'üìä';
    if (text.includes('landing') || text.includes('accueil')) return 'üè†';
    if (text.includes('chat') || text.includes('messagerie')) return 'üí¨';
    if (text.includes('calculateur') || text.includes('calculator')) return 'üßÆ';
    return '‚öõÔ∏è'; // React par d√©faut
  };

  const getProjectType = (prompt: string): string => {
    const text = prompt.toLowerCase();
    if (text.includes('restaurant') || text.includes('sushi') || text.includes('japonais')) return 'Site restaurant';
    if (text.includes('todo') || text.includes('task') || text.includes('liste')) return 'Application Todo';
    if (text.includes('snake') || text.includes('jeu') || text.includes('game')) return 'Jeu Snake';
    if (text.includes('e-commerce') || text.includes('shop') || text.includes('boutique')) return 'Site e-commerce';
    if (text.includes('portfolio') || text.includes('cv')) return 'Portfolio';
    if (text.includes('blog') || text.includes('article')) return 'Blog';
    if (text.includes('dashboard') || text.includes('admin')) return 'Dashboard';
    if (text.includes('landing') || text.includes('accueil')) return 'Page d\'accueil';
    if (text.includes('chat') || text.includes('messagerie')) return 'Application de chat';
    if (text.includes('calculateur') || text.includes('calculator')) return 'Calculateur';
    if (text.includes('site') || text.includes('web')) return 'Site web';
    return 'Composant React';
  };

  // ====================== FIN DES FONCTIONS ======================

  // D√©terminer si une d√©couverte conversationnelle est n√©cessaire
  const shouldStartDiscovery = (prompt: string): boolean => {
    const lowerPrompt = prompt.toLowerCase();
    
    // Toujours d√©marrer la d√©couverte pour les projets complexes
    const complexKeywords = [
      'site', 'application', 'app', 'projet', 'cr√©er', 'd√©velopper',
      'restaurant', 'e-commerce', 'boutique', 'blog', 'dashboard', 'admin',
      'portfolio', 'landing', 'plateforme', 'syst√®me'
    ];
    
    // Demandes simples qui n'√©cessitent pas de d√©couverte
    const simpleKeywords = [
      'hello', 'bonjour', 'salut', 'comment', 'expliquer', 'aide',
      'documentation', 'tutoriel', 'exemple simple'
    ];
    
    if (simpleKeywords.some(keyword => lowerPrompt.includes(keyword))) {
      return false;
    }
    
    return complexKeywords.some(keyword => lowerPrompt.includes(keyword)) || prompt.length > 50;
  };
  
  // D√©marrer une conversation de d√©couverte
  const startDiscoveryConversation = async (prompt: string) => {
    setIsInDiscoveryMode(true);
    
    // Analyser le prompt pour d√©terminer le contexte
    const projectType = detectProjectType(prompt);
    const personality = selectAIPersonality(prompt);
    
    setAiPersonality(personality);
    setDiscoveryContext({
      originalPrompt: prompt,
      projectType,
      gatheredInfo: {},
      questionsAsked: [],
      conversationStep: 1
    });
    
    // G√©n√©rer un message d'accueil personnalis√© et la premi√®re question
    const welcomeAndQuestion = await generateWelcomeAndFirstQuestion(prompt, projectType, personality);
    
    const aiMessage: Message = {
      id: `discovery_${Date.now()}`,
      type: 'assistant',
      content: welcomeAndQuestion,
      timestamp: new Date(),
      agent: 'project_orchestrator'
    };
    
    setMessages(prev => [...prev, aiMessage]);
    setShowWorkflowPanel(true);
  };
  
  // G√©n√©rer un message d'accueil et premi√®re question personnalis√©s
  const generateWelcomeAndFirstQuestion = async (
    originalPrompt: string,
    projectType: string,
    personality: string
  ): Promise<string> => {
    try {
      const welcomePrompt = `Tu es le Agent D√©veloppeur IA, un assistant IA expert et ${personality === 'friendly' ? 'amical' : personality === 'professional' ? 'professionnel' : 'cr√©atif'}.

L'utilisateur vient de demander: "${originalPrompt}"

J'ai d√©tect√© que c'est un projet de type: ${projectType}

T√ÇCHE:
1. Accueille l'utilisateur avec enthousiasme
2. Montre que tu as compris son projet
3. Pose UNE question contextuelle et pertinente pour mieux comprendre ses besoins

STYLE:
- Ton ${personality === 'friendly' ? 'amical et enthousiaste' : personality === 'professional' ? 'professionnel mais chaleureux' : 'cr√©atif et inspirant'}
- Utilise des emojis appropri√©s
- Sois concis mais engageant
- Montre ton expertise

EXEMPLE de format:
"Super ! Je vois que vous voulez cr√©er [type de projet]. üöÄ [commentaire intelligent sur le projet]

[Question contextuelle sp√©cifique] ü§î"

R√âPONDS DIRECTEMENT (sans pr√©ambule):`;
      
      const response = await request('/ultra/chat', {
        method: 'POST',
        body: JSON.stringify({
          message: welcomePrompt,
          agent: 'project_orchestrator',
          mode: 'welcome_generation'
        })
      });
      
      if (response && response.response) {
        return response.response;
      }
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration accueil:', error);
    }
    
    // Fallback plus naturel
    return generateFallbackWelcome(originalPrompt, projectType);
  };
  
  // Message d'accueil fallback
  const generateFallbackWelcome = (originalPrompt: string, projectType: string): string => {
    const welcomeMessages = {
      restaurant: "üçΩÔ∏è Super ! Un projet de restaurant, j'adore √ßa ! Pour que je puisse cr√©er exactement ce que vous voulez, dites-moi quel type de cuisine vous souhaitez mettre en avant ?",
      ecommerce: "üõçÔ∏è G√©nial ! Une boutique en ligne. Pour bien d√©marrer, pouvez-vous me dire quel type de produits vous souhaitez vendre ?",
      blog: "üìù Excellent ! Un blog. Pour cr√©er quelque chose qui vous ressemble, sur quels sujets souhaitez-vous √©crire principalement ?",
      portfolio: "üíº Parfait ! Un portfolio. Pour mettre en valeur votre travail, dans quel domaine exercez-vous ou voulez-vous vous positionner ?",
      webapp: "üöÄ Super projet ! Pour que je puisse cr√©er une application qui r√©pond parfaitement √† vos besoins, pouvez-vous me donner plus de d√©tails sur ce qu'elle devra faire ?"
    };
    
    return welcomeMessages[projectType as keyof typeof welcomeMessages] || welcomeMessages.webapp;
  };
  
  // D√©marrer directement le workflow sans d√©couverte
  const startDirectWorkflow = async (prompt: string) => {
    console.log('üöÄ D√©marrage direct du workflow...');
    setIsWorkflowRunning(true);
    setShowWorkflowPanel(true);
    
    try {
      const data = await request('/ultra/workflow/start', {
        method: 'POST',
        body: JSON.stringify({
          prompt: prompt,
          agent_id: 'quantum_developer'
        })
      });
      
      if (data && data.success) {
        setCurrentWorkflowId(data.workflow_id);
        // Continuer avec le workflow normal...
        simulateWorkflowProgress(data.workflow_id, [{
          id: 'step_quantum',
          name: 'Agent D√©veloppeur IA',
          agent: 'quantum_developer',
          status: 'running',
          progress: 0,
          startTime: new Date()
        }]);
      }
    } catch (error) {
      console.error('Erreur workflow direct:', error);
      setIsWorkflowRunning(false);
    }
  };
  
  // D√©tecter le type de projet
  const detectProjectType = (prompt: string): string => {
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('restaurant') || lowerPrompt.includes('menu')) return 'restaurant';
    if (lowerPrompt.includes('e-commerce') || lowerPrompt.includes('boutique')) return 'ecommerce';
    if (lowerPrompt.includes('blog') || lowerPrompt.includes('article')) return 'blog';
    if (lowerPrompt.includes('portfolio') || lowerPrompt.includes('cv')) return 'portfolio';
    if (lowerPrompt.includes('dashboard') || lowerPrompt.includes('admin')) return 'dashboard';
    if (lowerPrompt.includes('landing') || lowerPrompt.includes('accueil')) return 'landing';
    if (lowerPrompt.includes('todo') || lowerPrompt.includes('task')) return 'todo';
    
    return 'webapp';
  };
  
  // S√©lectionner la personnalit√© de l'IA
  const selectAIPersonality = (prompt: string): string => {
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('professionnel') || lowerPrompt.includes('entreprise')) return 'professional';
    if (lowerPrompt.includes('cr√©atif') || lowerPrompt.includes('artistique')) return 'creative';
    if (lowerPrompt.includes('fun') || lowerPrompt.includes('amusant')) return 'playful';
    
    return 'friendly';
  };
  
  // G√©n√©rer une question contextuelle intelligente via l'IA
  const generateContextualQuestion = async (
    originalPrompt: string, 
    projectType: string, 
    gatheredInfo: Record<string, any>, 
    questionsAsked: string[]
  ): Promise<string> => {
    const step = questionsAsked.length + 1;
    
    try {
      console.log('üß† G√©n√©ration de question contextuelle par l\'IA...');
      
      // Construire le contexte pour l'IA
      const contextPrompt = buildContextPromptForAI(
        originalPrompt, 
        projectType, 
        gatheredInfo, 
        questionsAsked, 
        step
      );
      
      // Appeler l'API pour g√©n√©rer une question contextuelle
      const response = await request('/ultra/chat', {
        method: 'POST',
        body: JSON.stringify({
          message: contextPrompt,
          agent: 'project_orchestrator',
          mode: 'question_generation',
          context: {
            originalPrompt,
            projectType,
            gatheredInfo,
            questionsAsked,
            step
          }
        })
      });
      
      if (response && response.response) {
        console.log('‚ú® Question g√©n√©r√©e par l\'IA:', response.response);
        return response.response;
      } else {
        throw new Error('R√©ponse invalide de l\'IA');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration question:', error);
      
      // Fallback: g√©n√©rer une question basique mais contextuelle
      return generateFallbackQuestion(originalPrompt, projectType, step);
    }
  };
  
  // Construire le prompt pour que l'IA g√©n√®re une question contextuelle
  const buildContextPromptForAI = (
    originalPrompt: string,
    projectType: string,
    gatheredInfo: Record<string, any>,
    questionsAsked: string[],
    step: number
  ): string => {
    let prompt = `Tu es le Agent D√©veloppeur IA, un assistant IA expert qui aide √† cr√©er des applications web.

DEMANDE ORIGINALE DE L'UTILISATEUR:
"${originalPrompt}"

CONTEXTE ACTUEL:
- Type de projet d√©tect√©: ${projectType}
- √âtape de la conversation: ${step}
`;
    
    // Ajouter les informations d√©j√† collect√©es
    if (Object.keys(gatheredInfo).length > 0) {
      prompt += '\nINFORMATIONS D√âJ√Ä COLLECT√âES:\n';
      Object.entries(gatheredInfo).forEach(([key, value], index) => {
        prompt += `${index + 1}. ${value}\n`;
      });
    }
    
    // Ajouter les r√©ponses pr√©c√©dentes si pertinentes
    if (questionsAsked.length > 0) {
      prompt += '\nR√âPONSES PR√âC√âDENTES:\n';
      questionsAsked.forEach((response, index) => {
        prompt += `${index + 1}. "${response}"\n`;
      });
    }
    
    prompt += `
TARON:
G√©n√®re UNE SEULE question contextuelle et pertinente pour mieux comprendre les besoins de l'utilisateur pour son projet ${projectType}.

RE√àGLES:
1. Pose une question sp√©cifique et utile bas√©e sur ce que tu sais d√©j√†
2. Utilise un ton amical et enthousiaste
3. Ajoute un emoji pertinent
4. Ne r√©p√®te pas les informations d√©j√† connues
5. Focus sur un aspect important qui manque pour bien concevoir l'application
6. Garde la question courte et claire
7. Adapte-toi au contexte sp√©cifique du projet

EXEMPLE de style attendu:
"Super ! Pour votre restaurant japonais, voulez-vous que les clients puissent r√©server en ligne directement sur le site ? üìÖ"

R√âPONDS UNIQUEMENT AVEC LA QUESTION (sans pr√©ambule ni explication):`;
    
    return prompt;
  };
  
  // Question fallback en cas d'√©chec de l'API
  const generateFallbackQuestion = (originalPrompt: string, projectType: string, step: number): string => {
    const fallbackQuestions = {
      restaurant: [
        "Quel type de cuisine souhaitez-vous mettre en avant ? üçΩÔ∏è",
        "Voulez-vous inclure un syst√®me de r√©servation en ligne ? üìÖ",
        "Quelle ambiance voulez-vous cr√©er pour votre site ? üé®"
      ],
      ecommerce: [
        "Quel type de produits allez-vous vendre ? üõçÔ∏è",
        "Avez-vous besoin d'un syst√®me de paiement int√©gr√© ? üí≥",
        "Combien de produits pr√©voyez-vous d'avoir initialement ? üì¶"
      ],
      webapp: [
        "Pouvez-vous me donner plus de d√©tails sur les fonctionnalit√©s principales ? ‚öôÔ∏è",
        "Qui sera l'utilisateur principal de votre application ? üë•",
        "Avez-vous des pr√©f√©rences particuli√®res pour le design ? üé®"
      ]
    };
    
    const questions = fallbackQuestions[projectType as keyof typeof fallbackQuestions] || fallbackQuestions.webapp;
    const questionIndex = Math.min(step - 1, questions.length - 1);
    return questions[questionIndex];
  };
  
  // Traiter la r√©ponse de l'utilisateur en mode d√©couverte
  // Version ultra-simplifi√©e de handleDiscoveryResponse
  const handleDiscoveryResponse = async (userResponse: string) => {
    if (!discoveryContext) return;
    
    try {
      console.log('üéØ Traitement r√©ponse discovery:', userResponse);
      
      // Envoyer la r√©ponse au Chef d'Orchestre avec le contexte de la conversation
      const conversationContext = messages
        .filter(msg => msg.agent === 'project_orchestrator' || msg.type === 'user')
        .slice(-4) // Garder les 4 derniers √©changes pour le contexte
        .map(msg => `${msg.type === 'user' ? 'Utilisateur' : 'Toi'}: ${msg.content}`)
        .join('\n');
      
      const contextualMessage = `üìã CONTEXTE COMPLET DE NOTRE CONVERSATION :
${conversationContext}

üó£Ô∏è NOUVELLE R√âPONSE DE L'UTILISATEUR : ${userResponse}

üí° CONTINUE cette conversation intelligemment en gardant TOUT le contexte. Sois naturel comme Claude ou ChatGPT. Si tu as suffisamment d'informations, conclus par "Parfait ! Je lance l'Agent D√©veloppeur IA pour cr√©er [description pr√©cise] !"`;

      const data = await request('/ultra/chat', {
        method: 'POST',
        body: JSON.stringify({
          message: contextualMessage,
          agent: 'project_orchestrator'
        })
      });
      
      if (data && data.response) {
        const orchestratorMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'assistant',
          content: data.response,
          timestamp: new Date(),
          agent: 'project_orchestrator'
        };
        
        setMessages(prev => [...prev, orchestratorMessage]);
        
        // Debug : voir la r√©ponse exacte du Chef d'Orchestre
        console.log('üîç R√©ponse Chef d\'Orchestre:', data.response);
        
        // V√©rifier si le Chef d'Orchestre dit qu'il lance l'Agent D√©veloppeur IA
        const responseText = data.response.toLowerCase();
        const shouldLaunchDeveloper = responseText.includes('je lance l\'agent d√©veloppeur ia') ||
                                    responseText.includes('je lance le agent d√©veloppeur') ||
                                    responseText.includes('lance l\'agent d√©veloppeur') ||
                                    responseText.includes('lance le agent d√©veloppeur') ||
                                    responseText.includes('lancer le d√©veloppement') ||
                                    responseText.includes('commencer le d√©veloppement') ||
                                    responseText.includes('d√©velopper votre') ||
                                    responseText.includes('cr√©er cette') ||
                                    responseText.includes('assez d\'informations') ||
                                    responseText.includes('j\'ai tout ce qu\'il faut') ||
                                    responseText.includes('on peut commencer') ||
                                    (responseText.includes('parfait') && responseText.includes('lance')) ||
                                    (responseText.includes('excellent') && responseText.includes('lance')) ||
                                    (responseText.includes('super') && responseText.includes('lance')) ||
                                    (responseText.includes('c\'est parti') && responseText.includes('d√©velopp')) ||
                                    (responseText.includes('allons-y') && responseText.includes('cr√©er'));
        
        console.log('üîç shouldLaunchDeveloper:', shouldLaunchDeveloper);
        
        if (shouldLaunchDeveloper) {
          console.log('üöÄ Chef d\'Orchestre lance l\'Agent D√©veloppeur IA !');
          
          // Cr√©er un prompt enrichi avec toute la conversation
          const conversationHistory = messages
            .filter(msg => msg.type === 'user')
            .map(msg => msg.content)
            .concat([userResponse])
            .join(' ');
          
          const enrichedPrompt = `${discoveryContext.originalPrompt} ${conversationHistory}`;
          
          console.log('üîç Prompt enrichi:', enrichedPrompt);
          
          // Lancer le workflow avec l'Agent D√©veloppeur IA
          setTimeout(async () => {
            console.log('üöÄ Appel launchQuantumDeveloper...');
            await launchQuantumDeveloper(enrichedPrompt);
          }, 1000);
          
          setIsInDiscoveryMode(false);
        } else {
          console.log('‚è∏Ô∏è Pas de signal de lancement d√©tect√©, conversation continue...');
          // Incr√©menter le compteur d'√©changes aussi ici
          const newExchangeCount = conversationExchangeCount + 1;
          setConversationExchangeCount(newExchangeCount);
          
          console.log('üî¢ Nombre d\'√©changes de conversation (discovery):', newExchangeCount);
          
          // Force launch apr√®s 5 √©changes (augment√© pour laisser plus de temps)
          if (newExchangeCount >= 5) {
            console.log('üöÄ FORCE LAUNCH: 5 √©changes atteints dans discovery, lancement automatique du d√©veloppeur !');
            const conversationHistory = messages
              .filter(msg => msg.type === 'user')
              .map(msg => msg.content)
              .join(' ');
            
            const enrichedPrompt = `${conversationHistory} ${userResponse}`;
            
            setTimeout(async () => {
              await launchQuantumDeveloper(enrichedPrompt);
            }, 1000);
            
            setIsInDiscoveryMode(false);
            setConversationExchangeCount(0);
            return;
          }
        }
        // Sinon, continuer la conversation (le Chef d'Orchestre posera la question suivante)
      }
      
    } catch (error) {
      console.error('‚ùå Erreur traitement r√©ponse discovery:', error);
      notifications.error('Erreur', 'Impossible de traiter la r√©ponse');
    }
  };
  
  // Analyser la r√©ponse de l'utilisateur avec l'IA
  const analyzeUserResponse = async (
    userResponse: string,
    originalPrompt: string,
    projectType: string,
    currentInfo: Record<string, any>
  ) => {
    try {
      const analysisPrompt = `Tu es le Agent D√©veloppeur IA. Analyse cette r√©ponse utilisateur pour extraire les informations utiles.

PROJET: ${projectType}
DEMANDE ORIGINALE: "${originalPrompt}"
R√âPONSE UTILISATEUR: "${userResponse}"

INFOS D√âJ√Ä COLLECT√âES:
${Object.values(currentInfo).map((info, i) => `${i + 1}. ${info}`).join('\n')}

EXTRAIS et SYNTH√âTISE les informations cl√©s de cette r√©ponse qui sont utiles pour cr√©er l'application.

R√âPONDS AU FORMAT JSON:
{
  "extractedInfo": "synth√®se des infos utiles",
  "confidence": 0.8,
  "suggestedNextFocus": "aspect √† explorer ensuite"
}`;
      
      const response = await request('/ultra/chat', {
        method: 'POST',
        body: JSON.stringify({
          message: analysisPrompt,
          agent: 'project_orchestrator',
          mode: 'analysis'
        })
      });
      
      if (response && response.response) {
        try {
          const parsed = JSON.parse(response.response);
          return parsed;
        } catch {
          // Si ce n'est pas du JSON, utiliser la r√©ponse directement
          return {
            extractedInfo: response.response,
            confidence: 0.7,
            suggestedNextFocus: null
          };
        }
      }
    } catch (error) {
      console.error('‚ùå Erreur analyse r√©ponse:', error);
    }
    
    // Fallback
    return {
      extractedInfo: userResponse,
      confidence: 0.5,
      suggestedNextFocus: null
    };
  };
  
  // D√©cider intelligemment si on doit continuer la d√©couverte
  const shouldContinueDiscovery = async (
    context: typeof discoveryContext,
    analyzedResponse: any,
    userResponse: string
  ): Promise<boolean> => {
    // Mots-cl√©s qui indiquent que l'utilisateur veut arr√™ter
    const stopKeywords = [
      'c\'est tout', '√ßa suffit', 'on peut commencer', 'lance le projet',
      'go', 'parfait', 'c\'est bon', 'ok let\'s go', 'maintenant', 'start'
    ];
    
    if (stopKeywords.some(keyword => userResponse.toLowerCase().includes(keyword))) {
      return false;
    }
    
    // Si on a d√©j√† assez d'informations de base, on peut arr√™ter
    if (context && Object.keys(context.gatheredInfo).length >= 3) {
      return false;
    }
    
    // Si l'analyse indique une faible confiance, poser une autre question
    if (analyzedResponse.confidence < 0.6) {
      return true;
    }
    
    return true;
  };
  
  // D√©terminer si on doit terminer la d√©couverte
  const shouldFinishDiscovery = (response: string): boolean => {
    const finishKeywords = [
      'c\'est tout', '√ßa suffit', 'on peut commencer', 'lance le projet', 
      'go', 'parfait', 'c\'est bon', 'ok let\'s go'
    ];
    
    return finishKeywords.some(keyword => 
      response.toLowerCase().includes(keyword)
    );
  };
  
  // Terminer la d√©couverte et lancer le workflow
  const finishDiscoveryAndStartWorkflow = async (context: typeof discoveryContext) => {
    if (!context) return;
    
    setIsInDiscoveryMode(false);
    
    // Cr√©er un prompt enrichi avec toutes les informations recueillies
    const enrichedPrompt = createEnrichedPromptFromDiscovery(context);
    
    // Message r√©capitulatif sympa
    const summaryMessage: Message = {
      id: `summary_${Date.now()}`,
      type: 'assistant',
      content: `üéÜ **Parfait ! J'ai tout ce qu'il faut !**

üß† Voici ce que j'ai compris :
${createDiscoverySummary(context)}

üöÄ **Je lance maintenant le Agent D√©veloppeur IA pour cr√©er votre projet !**`,
      timestamp: new Date(),
      agent: 'project_orchestrator'
    };
    
    setMessages(prev => [...prev, summaryMessage]);
    
    // Lancer le workflow avec le prompt enrichi
    await startEnrichedWorkflow(enrichedPrompt, context.gatheredInfo);
  };
  
  // Cr√©er un prompt enrichi √† partir de la d√©couverte
  const createEnrichedPromptFromDiscovery = (context: typeof discoveryContext): string => {
    if (!context) return '';
    
    let enrichedPrompt = context.originalPrompt;
    
    // Ajouter les informations gather√©es
    const info = context.gatheredInfo;
    if (Object.keys(info).length > 0) {
      enrichedPrompt += '\n\nDETAILS SPECIFIQUES:';
      Object.entries(info).forEach(([key, value]) => {
        enrichedPrompt += `\n- ${value}`;
      });
    }
    
    enrichedPrompt += `\n\nTYPE DE PROJET: ${context.projectType}`;
    enrichedPrompt += `\nPERSONNALITE DEMANDEE: ${aiPersonality}`;
    enrichedPrompt += '\n\nCr√©e une application qui correspond exactement √† ces sp√©cifications avec une interface moderne et intuitive.';
    
    return enrichedPrompt;
  };
  
  // Cr√©er un r√©sum√© de la d√©couverte
  const createDiscoverySummary = (context: typeof discoveryContext): string => {
    if (!context) return '';
    
    const summary = [];
    summary.push(`üéØ **Type:** ${context.projectType}`);
    
    Object.values(context.gatheredInfo).forEach((info, index) => {
      summary.push(`‚Ä¢ ${info}`);
    });
    
    return summary.join('\n');
  };
  
  // D√©marrer le workflow enrichi
  const startEnrichedWorkflow = async (enrichedPrompt: string, userPreferences: Record<string, any>) => {
    setIsWorkflowRunning(true);
    
    // Notification de d√©marrage
    const notificationId = notifications.notifyWorkflowStart(enrichedPrompt.slice(0, 50) + '...');
    setCurrentNotificationId(notificationId);

    try {
      console.log('üöÄ D√©marrage du workflow avec d√©couverte:', enrichedPrompt);
      const data = await request('/ultra/workflow/start', {
        method: 'POST',
        body: JSON.stringify({
          prompt: enrichedPrompt,
          agent_id: 'quantum_developer',
          user_preferences: userPreferences,
          discovery_mode: true
        })
      });

      if (data && data.success) {
        setCurrentWorkflowId(data.workflow_id);
        
        // D√©marrer le WebSocket streaming et polling
        simulateWorkflowProgress(data.workflow_id, [{
          id: 'step_quantum',
          name: 'Agent D√©veloppeur IA Conversationnel',
          agent: 'quantum_developer',
          status: 'running',
          progress: 0,
          startTime: new Date()
        }]);
        
      } else {
        throw new Error('Impossible de d√©marrer le workflow conversationnel');
      }
    } catch (error) {
      console.error('Erreur workflow conversationnel:', error);
      
      const errorMessage: Message = {
        id: Date.now().toString(),
        type: 'system',
        content: `‚ùå Erreur: ${error instanceof Error ? error.message : 'Impossible de d√©marrer le workflow'}`,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, errorMessage]);
      currentNotificationId && notifications.notifyWorkflowComplete(currentNotificationId, 'Workflow', false);
      setIsWorkflowRunning(false);
    }
  };
  
  // G√©n√©rer des questions intelligentes bas√©es sur le prompt (version d√©pr√©ci√©e)
  const generateIntelligentQuestions = (prompt: string) => {
    const lowerPrompt = prompt.toLowerCase();
    const questions = [];
    
    // D√©tecter le type de projet
    let projectType = 'web';
    let detectedFeatures = [];
    
    if (lowerPrompt.includes('restaurant') || lowerPrompt.includes('menu') || lowerPrompt.includes('sushi')) {
      projectType = 'restaurant';
      detectedFeatures = ['menu', 'r√©servation', 'galerie', 'contact'];
    } else if (lowerPrompt.includes('todo') || lowerPrompt.includes('task') || lowerPrompt.includes('liste')) {
      projectType = 'todo';
      detectedFeatures = ['ajout de t√¢ches', 'suppression', 'marquer comme termin√©', 'cat√©gories'];
    } else if (lowerPrompt.includes('e-commerce') || lowerPrompt.includes('boutique') || lowerPrompt.includes('shop')) {
      projectType = 'ecommerce';
      detectedFeatures = ['catalogue produits', 'panier', 'paiement', 'compte utilisateur'];
    } else if (lowerPrompt.includes('blog') || lowerPrompt.includes('article')) {
      projectType = 'blog';
      detectedFeatures = ['articles', 'commentaires', 'cat√©gories', 'recherche'];
    } else if (lowerPrompt.includes('dashboard') || lowerPrompt.includes('admin')) {
      projectType = 'dashboard';
      detectedFeatures = ['graphiques', 'tableaux de bord', 'gestion utilisateurs', 'statistiques'];
    }
    
    // Question 1: Fonctionnalit√©s sp√©cifiques
    questions.push({
      id: 'features',
      question: `J'ai detect√© que vous voulez cr√©er un projet ${projectType}. Quelles fonctionnalit√©s principales souhaitez-vous inclure ?`,
      suggestions: detectedFeatures.concat(['Autre fonctionnalit√© personnalis√©e']),
      type: 'multiple' as const
    });
    
    // Question 2: Style et design
    questions.push({
      id: 'design',
      question: 'Quel style de design pr√©f√©rez-vous pour votre application ?',
      suggestions: [
        'Moderne et minimaliste (Tesla style)',
        'Color√© et dynamique', 
        'Professionnel et sobre',
        'Cr√©atif et artistique',
        'Dark mode avec accents'
      ],
      type: 'choice' as const
    });
    
    // Question 3: Couleurs pr√©f√©r√©es
    questions.push({
      id: 'colors',
      question: 'Avez-vous des couleurs pr√©f√©r√©es pour votre projet ?',
      suggestions: [
        'Bleu et blanc (professionnel)',
        'Rouge et noir (Tesla style)',
        'Vert et gris (nature)',
        'Violet et rose (cr√©atif)',
        'Orange et jaune (√©nergique)',
        'Personnalis√©'
      ],
      type: 'choice' as const
    });
    
    // Question 4: Responsive et plateformes
    questions.push({
      id: 'responsive',
      question: 'Sur quelles plateformes votre application sera-t-elle utilis√©e ?',
      suggestions: [
        'Desktop uniquement',
        'Mobile-first',
        'Desktop et mobile (√©quilibr√©)',
        'Tablette prioritaire',
        'Toutes les plateformes'
      ],
      type: 'choice' as const
    });
    
    // Question 5: Fonctionnalit√©s avanc√©es (conditionnelle)
    if (projectType === 'ecommerce' || projectType === 'blog' || projectType === 'dashboard') {
      questions.push({
        id: 'advanced',
        question: 'Souhaitez-vous inclure des fonctionnalit√©s avanc√©es ?',
        suggestions: [
          'Authentification utilisateur',
          'Base de donn√©es / Storage local',
          'Notifications temps r√©el',
          'Partage sur r√©seaux sociaux',
          'Mode hors-ligne',
          'Pas de fonctionnalit√©s avanc√©es pour l\'instant'
        ],
        type: 'multiple' as const
      });
    }
    
    return questions;
  };
  
  const stopWorkflow = () => {
    if (websocket) {
      websocket.close();
    }
    // Nettoyer tous les timeouts et buffers
    clearTimeout(streamingTimeoutRef.current);
    clearTimeout(scrollTimeoutRef.current);
    streamingBufferRef.current = '';
    
    setIsWorkflowRunning(false);
    setWorkflowSteps([]);
    setCurrentWorkflowId(null);
    notifications.warning('Workflow arr√™t√©', 'Le workflow a √©t√© interrompu manuellement');
  };

  const getStepStatusIcon = (status: string) => {
    switch (status) {
      case 'running':
        return <Loader2 className="w-4 h-4 animate-spin text-yellow-500" />;
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'error':
        return <AlertCircle className="w-4 h-4 text-red-500" />;
      default:
        return <Clock className="w-4 h-4 text-gray-500" />;
    }
  };

  const getAgentIcon = (agentId: string) => {
    const agent = agents.find(a => a.id === agentId);
    return agent?.icon || <Bot className="w-4 h-4" />;
  };

  const formatDuration = (startTime: Date, endTime: Date): string => {
    try {
      const durationMs = endTime.getTime() - startTime.getTime();
      if (isNaN(durationMs) || durationMs < 0) return '0s';
      
      const seconds = Math.round(durationMs / 1000);
      if (seconds < 60) return `${seconds}s`;
      
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      return `${minutes}m ${remainingSeconds}s`;
    } catch (error) {
      return '0s';
    }
  };

  const safeToLocaleTimeString = (date: Date | string | number | undefined | null): string => {
    try {
      let dateObj: Date;
      
      // G√©rer les cas null/undefined
      if (!date) {
        console.warn('Date null/undefined, utilisation de maintenant');
        dateObj = new Date();
      } else if (date instanceof Date) {
        dateObj = date;
      } else if (typeof date === 'string' || typeof date === 'number') {
        dateObj = new Date(date);
      } else {
        console.warn('Type de date non reconnu:', typeof date, date);
        dateObj = new Date();
      }
      
      // V√©rifier si la date est valide
      if (isNaN(dateObj.getTime())) {
        console.warn('Date invalide d√©tect√©e:', date, 'utilisation de maintenant');
        dateObj = new Date();
      }
      
      // Formatage simple et fiable avec validation suppl√©mentaire
      let hours = dateObj.getHours();
      let minutes = dateObj.getMinutes();
      let seconds = dateObj.getSeconds();
      
      // V√©rifier que les valeurs sont des nombres valides et les normaliser
      if (isNaN(hours) || hours < 0 || hours > 23) {
        console.error('Heures invalides:', hours, 'pour la date:', dateObj);
        hours = new Date().getHours();
      }
      if (isNaN(minutes) || minutes < 0 || minutes > 59) {
        console.error('Minutes invalides:', minutes, 'pour la date:', dateObj);
        minutes = new Date().getMinutes();
      }
      if (isNaN(seconds) || seconds < 0 || seconds > 59) {
        console.error('Secondes invalides:', seconds, 'pour la date:', dateObj);
        seconds = new Date().getSeconds();
      }
      
      // Formatage ultra-s√©curis√© avec v√©rification finale
      const hoursStr = (hours || 0).toString();
      const minutesStr = (minutes || 0).toString();
      const secondsStr = (seconds || 0).toString();
      
      // V√©rifier que toString() n'a pas retourn√© "NaN"
      if (hoursStr === 'NaN' || minutesStr === 'NaN' || secondsStr === 'NaN') {
        console.error('NaN d√©tect√© dans toString():', { hoursStr, minutesStr, secondsStr });
        const now = new Date();
        return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
      }
      
      return `${hoursStr.padStart(2, '0')}:${minutesStr.padStart(2, '0')}:${secondsStr.padStart(2, '0')}`;
    } catch (error) {
      console.error('Erreur critique formatage date:', error, 'date:', date);
      const now = new Date();
      const h = now.getHours();
      const m = now.getMinutes();
      const s = now.getSeconds();
      return `${(h || 0).toString().padStart(2, '0')}:${(m || 0).toString().padStart(2, '0')}:${(s || 0).toString().padStart(2, '0')}`;
    }
  };

  return (
    <div className="tesla-chat min-h-screen bg-gradient-to-br from-black via-gray-900 to-black">
      <div className="flex h-screen">
        {/* Main Chat Area */}
        <div className={`${showWorkflowPanel ? 'w-2/3' : 'w-full'} flex flex-col transition-all duration-300`}>
          {/* Header */}
          <div className="p-6 border-b border-white border-opacity-10 bg-black bg-opacity-30 backdrop-blur-sm">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-white text-2xl font-light tracking-wide">
                  Atelier IA - Workflow
                </h1>
                <div className="flex items-center space-x-4 mt-1">
                  <p className="text-gray-400">
                    {isWorkflowRunning ? '‚ö° Workflow en cours...' : 'ü§ñ Pr√™t √† orchestrer vos agents'}
                  </p>
                  
                  {/* Status indicators */}
                  <div className="flex items-center space-x-3">
                    <StatusIndicator
                      type={connectionStatus === 'connected' ? 'connected' : 'disconnected'}
                      label="API"
                      size="sm"
                    />
                    {isAuthenticated && (
                      <StatusIndicator
                        type="secure"
                        label={user?.name || 'Connect√©'}
                        size="sm"
                      />
                    )}
                    {isWorkflowRunning && (
                      <StatusIndicator
                        type="running"
                        label="Workflow actif"
                        size="sm"
                      />
                    )}
                  </div>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                {isWorkflowRunning && (
                  <ActionButton
                    type="stop"
                    label="Arr√™ter"
                    onClick={stopWorkflow}
                    size="sm"
                  />
                )}
                
                <motion.button
                  className="text-gray-400 hover:text-white transition-colors"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => setShowWorkflowPanel(!showWorkflowPanel)}
                >
                  {showWorkflowPanel ? (
                    <PanelRightClose className="w-5 h-5" />
                  ) : (
                    <PanelRightOpen className="w-5 h-5" />
                  )}
                </motion.button>
              </div>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-6 space-y-6 messages-list chat-container">
            <AnimatePresence mode="popLayout">
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'} message-container`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.2, ease: "easeOut" }}
                  layout={false}
                >
                  <div className={`max-w-2xl tesla-card p-4 relative chat-message ${
                    message.isStreaming ? 'streaming-message' : ''
                  } ${
                    message.type === 'user' 
                      ? 'bg-red-600 bg-opacity-20 border-red-500 border-opacity-30' 
                      : message.type === 'system'
                      ? 'bg-blue-600 bg-opacity-20 border-blue-500 border-opacity-30'
                      : message.type === 'workflow'
                      ? 'bg-yellow-600 bg-opacity-20 border-yellow-500 border-opacity-30'
                      : 'bg-white bg-opacity-5 border-white border-opacity-10'
                  }`}>
                    {message.isStreaming && (
                      <div className="absolute inset-0 rounded-lg overflow-hidden pointer-events-none">
                        <div className="streaming-shimmer" />
                      </div>
                    )}
                    
                    <div className="flex items-start space-x-3 relative z-10">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                        message.type === 'user' 
                          ? 'bg-red-600' 
                          : message.type === 'system'
                          ? 'bg-blue-600'
                          : message.type === 'workflow'
                          ? 'bg-yellow-600'
                          : 'bg-gray-600'
                      }`}>
                        {message.type === 'user' ? (
                          <User className="w-4 h-4 text-white" />
                        ) : message.type === 'system' ? (
                          <Settings className="w-4 h-4 text-white" />
                        ) : message.type === 'workflow' ? (
                          <Zap className="w-4 h-4 text-white" />
                        ) : message.agent ? (
                          getAgentIcon(message.agent)
                        ) : (
                          <Bot className="w-4 h-4 text-white" />
                        )}
                      </div>
                      
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-1">
                          <span className="text-gray-300 text-sm font-medium">
                            {message.type === 'user' 
                              ? 'Vous' 
                              : message.type === 'system'
                              ? 'Syst√®me'
                              : message.type === 'workflow'
                              ? 'Orchestrateur'
                              : message.agent 
                              ? agents.find(a => a.id === message.agent)?.name || message.agent
                              : 'Assistant'
                            }
                          </span>
                          
                          {message.workflowStep && message.totalSteps && (
                            <span className="text-xs text-gray-500 bg-gray-700 px-2 py-1 rounded">
                              √âtape {message.workflowStep}/{message.totalSteps}
                            </span>
                          )}
                        </div>
                        
                        <div className="text-white leading-relaxed whitespace-pre-wrap">
                          {message.content}
                          {message.isStreaming && (
                            <span className="inline-block w-2 h-5 bg-white ml-1 animate-pulse" />
                          )}
                        </div>
                        
                        <div className="text-gray-400 text-xs mt-2">
                          {new Date().toLocaleTimeString()}
                        </div>
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>

            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-6 border-t border-white border-opacity-10 bg-black bg-opacity-30 backdrop-blur-sm">
            <div className="flex space-x-4">
              <input
                ref={inputRef}
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="D√©crivez votre projet pour d√©marrer un workflow..."
                className="flex-1 tesla-chat input-field px-4 py-3 rounded-lg"
                disabled={isWorkflowRunning}
              />
              
              <ActionButton
                type={isWorkflowRunning ? 'loading' : 'play'}
                label={isWorkflowRunning ? 'En cours...' : 'D√©marrer'}
                onClick={startWorkflow}
                disabled={isWorkflowRunning || !input.trim() || !isAuthenticated}
                size="md"
              />
              
              {/* Bouton manuel pour lancer le d√©veloppement */}
              {isInDiscoveryMode && !isWorkflowRunning && (
                <ActionButton
                  type="play"
                  label="üöÄ Lancer maintenant"
                  onClick={async () => {
                    console.log('üöÄ LANCEMENT MANUEL d√©clench√© par l\'utilisateur');
                    const conversationHistory = messages
                      .filter(msg => msg.type === 'user')
                      .map(msg => msg.content)
                      .join(' ');
                    
                    const enrichedPrompt = `${conversationHistory} ${input}`;
                    setIsInDiscoveryMode(false);
                    setConversationExchangeCount(0);
                    await launchQuantumDeveloper(enrichedPrompt);
                  }}
                  disabled={false}
                  size="sm"
                />
              )}
            </div>
          </div>
        </div>

        {/* Workflow Panel */}
        <AnimatePresence>
          {showWorkflowPanel && (
            <motion.div
              className="w-1/3 border-l border-white border-opacity-10 bg-black bg-opacity-50 backdrop-blur-xl"
              initial={{ x: '100%' }}
              animate={{ x: 0 }}
              exit={{ x: '100%' }}
              transition={{ type: "spring", damping: 30, stiffness: 300 }}
            >
              <div className="h-full flex flex-col">
                {/* Panel Header */}
                <div className="p-6 border-b border-white border-opacity-10">
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="text-white text-lg font-light tracking-wide">
                      {editorView === 'workflow' ? 'Workflow Progress' : 
                       editorView === 'code' ? 'Code G√©n√©r√©' : 
                       editorView === 'preview' ? 'Preview Live' : 'Configuration'}
                    </h3>
                    
                    <div className="flex items-center space-x-2">
                      <motion.button
                        className={`px-3 py-1 rounded text-sm transition-colors ${
                          editorView === 'workflow' 
                            ? 'bg-white bg-opacity-20 text-white' 
                            : 'text-gray-400 hover:text-white'
                        }`}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => setEditorView('workflow')}
                      >
                        <TrendingUp className="w-4 h-4 mr-1 inline" />
                        Progress
                      </motion.button>
                      
                      <motion.button
                        className={`px-3 py-1 rounded text-sm transition-colors ${
                          editorView === 'code' 
                            ? 'bg-white bg-opacity-20 text-white' 
                            : 'text-gray-400 hover:text-white'
                        }`}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => setEditorView('code')}
                      >
                        <Code className="w-4 h-4 mr-1 inline" />
                        Code
                        {showCodeEditor && (
                          <motion.div
                            className="w-2 h-2 bg-green-400 rounded-full ml-1 inline-block"
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            transition={{ type: "spring", stiffness: 500, damping: 30 }}
                          />
                        )}
                      </motion.button>
                      
                      <motion.button
                        className={`px-3 py-1 rounded text-sm transition-colors ${
                          editorView === 'preview' 
                            ? 'bg-white bg-opacity-20 text-white' 
                            : 'text-gray-400 hover:text-white'
                        }`}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => {
                          setEditorView('preview');
                          setPreviewContent(generatePreviewHTML(generatedCode));
                          setShowPreview(true);
                        }}
                      >
                        <Eye className="w-4 h-4 mr-1 inline" />
                        Preview
                        {showPreview && (
                          <motion.div
                            className="w-2 h-2 bg-blue-400 rounded-full ml-1 inline-block"
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            transition={{ type: "spring", stiffness: 500, damping: 30 }}
                          />
                        )}
                      </motion.button>
                      
                      <motion.button
                        className={`px-3 py-1 rounded text-sm transition-colors ${
                          editorView === 'config' 
                            ? 'bg-white bg-opacity-20 text-white' 
                            : 'text-gray-400 hover:text-white'
                        }`}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => setEditorView('config')}
                      >
                        <Settings className="w-4 h-4 mr-1 inline" />
                        Config
                      </motion.button>
                    </div>
                  </div>
                  
                  <StatusIndicator
                    type={isWorkflowRunning ? 'running' : 'idle'}
                    label={isWorkflowRunning ? 'En cours d\'ex√©cution' : 'En attente'}
                    size="sm"
                  />
                </div>

                {/* Contenu du panneau */}
                <div className="flex-1 overflow-hidden">
                  {editorView === 'workflow' ? (
                    /* Workflow Steps - Utilisation du composant WorkflowProgress */
                    <div className="h-full overflow-y-auto p-6">
                      <WorkflowProgress
                        steps={workflowSteps.map(step => ({
                          id: step.id,
                          name: step.name,
                          status: step.status,
                          progress: step.progress
                        }))}
                      />
                      
                      {/* D√©tails des √©tapes */}
                      <div className="space-y-4 mt-6">
                        {workflowSteps.map((step, index) => (
                          <motion.div
                            key={step.id}
                            className="tesla-card p-4 bg-white bg-opacity-5 border-white border-opacity-10"
                            initial={{ opacity: 0, x: 20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.1 }}
                          >
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center space-x-3">
                                <StatusIndicator
                                  type={
                                    step.status === 'completed' ? 'success' :
                                    step.status === 'running' ? 'loading' :
                                    step.status === 'error' ? 'error' : 'idle'
                                  }
                                  label={step.name}
                                  size="sm"
                                />
                              </div>
                              
                              <span className="text-gray-400 text-xs bg-gray-700 px-2 py-1 rounded">
                                {Math.round(isNaN(step.progress) ? 0 : step.progress)}%
                              </span>
                            </div>
                            
                            <div className="text-gray-400 text-xs">
                              Agent: {agents.find(a => a.id === step.agent)?.description || step.agent}
                            </div>
                            
                            {step.startTime && (
                              <div className="text-gray-500 text-xs mt-1">
                                D√©marr√©: {safeToLocaleTimeString(step.startTime instanceof Date ? step.startTime : new Date(step.startTime))}
                              </div>
                            )}
                            
                            {step.endTime && (
                              <div className="text-gray-500 text-xs">
                                Termin√©: {safeToLocaleTimeString(step.endTime instanceof Date ? step.endTime : new Date(step.endTime))}
                                {step.startTime && (
                                  <span className="ml-2">
                                    ({formatDuration(
                                      step.startTime instanceof Date ? step.startTime : new Date(step.startTime),
                                      step.endTime instanceof Date ? step.endTime : new Date(step.endTime)
                                    )})
                                  </span>
                                )}
                              </div>
                            )}
                          </motion.div>
                        ))}

                        {workflowSteps.length === 0 && !isWorkflowRunning && (
                          <div className="text-center py-12">
                            <TrendingUp className="w-12 h-12 text-gray-600 mx-auto mb-4" />
                            <p className="text-gray-400">
                              D√©marrez un workflow pour voir le progr√®s ici
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  ) : editorView === 'code' ? (
                    /* Monaco Editor avec explorateur de fichiers */
                    <div className="h-full flex">
                      {/* Explorateur de fichiers */}
                      {showFileExplorer && Object.keys(projectFiles).length > 0 && (
                        <div className="w-1/3 border-r border-white border-opacity-10 bg-black bg-opacity-20">
                          <div className="p-3 border-b border-white border-opacity-10 bg-black bg-opacity-30">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center space-x-2">
                                <FileText className="w-4 h-4 text-gray-400" />
                                <span className="text-gray-300 text-sm">Explorateur</span>
                              </div>
                              <motion.button
                                className="p-1 text-gray-400 hover:text-white transition-colors"
                                whileHover={{ scale: 1.1 }}
                                whileTap={{ scale: 0.9 }}
                                onClick={() => setShowFileExplorer(false)}
                                title="Masquer l'explorateur"
                              >
                                <PanelRightClose className="w-4 h-4" />
                              </motion.button>
                            </div>
                          </div>
                          
                          <div className="overflow-y-auto h-full pb-16">
                            <div className="p-2">
                              {Object.entries(projectFiles).map(([filepath, fileData]) => {
                                const isSelected = selectedFile === filepath;
                                const fileName = filepath.split('/').pop() || filepath;
                                const fileExtension = fileName.split('.').pop() || '';
                                
                                const getFileIcon = (ext: string) => {
                                  switch (ext) {
                                    case 'tsx':
                                    case 'jsx':
                                      return '‚öõÔ∏è';
                                    case 'ts':
                                    case 'js':
                                      return 'üìú';
                                    case 'css':
                                      return 'üé®';
                                    case 'html':
                                      return 'üåê';
                                    case 'json':
                                      return 'üìã';
                                    default:
                                      return 'üìÑ';
                                  }
                                };
                                
                                return (
                                  <motion.div
                                    key={filepath}
                                    className={`p-2 rounded cursor-pointer transition-all ${
                                      isSelected 
                                        ? 'bg-white bg-opacity-20 border-l-2 border-blue-400' 
                                        : 'hover:bg-white hover:bg-opacity-10'
                                    }`}
                                    whileHover={{ x: 4 }}
                                    whileTap={{ scale: 0.98 }}
                                    onClick={() => {
                                      setSelectedFile(filepath);
                                      setGeneratedCode(fileData.content);
                                      setCodeLanguage(fileData.language || 'typescript');
                                    }}
                                  >
                                    <div className="flex items-center space-x-2">
                                      <span className="text-lg">{getFileIcon(fileExtension)}</span>
                                      <div className="flex-1 min-w-0">
                                        <div className="text-gray-300 text-sm font-medium truncate">
                                          {fileName}
                                        </div>
                                        <div className="text-gray-500 text-xs truncate">
                                          {filepath}
                                        </div>
                                      </div>
                                      {isSelected && (
                                        <motion.div
                                          className="w-2 h-2 bg-blue-400 rounded-full"
                                          initial={{ scale: 0 }}
                                          animate={{ scale: 1 }}
                                          transition={{ type: "spring", stiffness: 500, damping: 30 }}
                                        />
                                      )}
                                    </div>
                                  </motion.div>
                                );
                              })}
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {/* √âditeur principal */}
                      <div className="flex-1 flex flex-col">
                        {/* Toolbar de l'√©diteur */}
                        <div className="p-3 border-b border-white border-opacity-10 bg-black bg-opacity-30">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              {!showFileExplorer && Object.keys(projectFiles).length > 0 && (
                                <motion.button
                                  className="p-1 text-gray-400 hover:text-white transition-colors mr-2"
                                  whileHover={{ scale: 1.1 }}
                                  whileTap={{ scale: 0.9 }}
                                  onClick={() => setShowFileExplorer(true)}
                                  title="Afficher l'explorateur"
                                >
                                  <PanelRightOpen className="w-4 h-4" />
                                </motion.button>
                              )}
                              <FileText className="w-4 h-4 text-gray-400" />
                              <span className="text-gray-300 text-sm">
                                {selectedFile && typeof selectedFile === 'string' ? selectedFile.split('/').pop() : `code.${codeLanguage === 'typescript' ? 'tsx' : codeLanguage === 'python' ? 'py' : codeLanguage === 'html' ? 'html' : 'txt'}`}
                              </span>
                              {showCodeEditor && generatedCode && (
                                <motion.div
                                  className="w-2 h-2 bg-green-400 rounded-full"
                                  initial={{ scale: 0 }}
                                  animate={{ scale: 1 }}
                                  transition={{ type: "spring", stiffness: 500, damping: 30 }}
                                  title="Code disponible"
                                />
                              )}
                            </div>
                            
                            <div className="flex items-center space-x-2">
                              <motion.button
                                className="p-1 text-gray-400 hover:text-white transition-colors"
                                whileHover={{ scale: 1.1 }}
                                whileTap={{ scale: 0.9 }}
                                onClick={() => navigator.clipboard.writeText(generatedCode)}
                                title="Copier le code"
                              >
                                <Copy className="w-4 h-4" />
                              </motion.button>
                              
                              <select 
                                value={codeLanguage} 
                                onChange={(e) => setCodeLanguage(e.target.value)}
                                className="bg-gray-700 text-white text-xs px-2 py-1 rounded border-none"
                              >
                                <option value="typescript">TypeScript</option>
                                <option value="javascript">JavaScript</option>
                                <option value="python">Python</option>
                                <option value="html">HTML</option>
                                <option value="css">CSS</option>
                                <option value="json">JSON</option>
                                <option value="markdown">Markdown</option>
                              </select>
                            </div>
                          </div>
                        </div>
                        
                        {/* √âditeur Monaco */}
                        <div className="flex-1">
                          {showCodeEditor ? (
                            <MonacoEditor
                              height="100%"
                              language={codeLanguage}
                              value={generatedCode}
                              onChange={(value) => setGeneratedCode(value || '')}
                              theme="vs-dark"
                              options={{
                                fontSize: 13,
                                minimap: { enabled: false },
                                scrollBeyondLastLine: false,
                                wordWrap: 'on',
                                lineNumbers: 'on',
                                renderWhitespace: 'selection',
                                automaticLayout: true,
                                padding: { top: 16, bottom: 16 },
                                bracketPairColorization: { enabled: true },
                                folding: true,
                                foldingHighlight: true,
                                showFoldingControls: 'always',
                                smoothScrolling: true,
                                cursorBlinking: 'smooth',
                                cursorSmoothCaretAnimation: 'on'
                              }}
                            />
                          ) : (
                            <div className="flex items-center justify-center h-full">
                              <div className="text-center">
                                <Code className="w-16 h-16 text-gray-600 mx-auto mb-4" />
                                <p className="text-gray-400 mb-2">Aucun code g√©n√©r√©</p>
                                <p className="text-gray-500 text-sm">
                                  Le code appara√Ætra ici lors de la g√©n√©ration
                                </p>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ) : editorView === 'preview' ? (
                    /* Preview Live */
                    <div className="h-full flex flex-col">
                      {/* Toolbar du preview */}
                      <div className="p-3 border-b border-white border-opacity-10 bg-black bg-opacity-30">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <Eye className="w-4 h-4 text-gray-400" />
                            <span className="text-gray-300 text-sm">Preview Live</span>
                            {showPreview && (
                              <motion.div
                                className="w-2 h-2 bg-blue-400 rounded-full"
                                initial={{ scale: 0 }}
                                animate={{ scale: 1 }}
                                transition={{ type: "spring", stiffness: 500, damping: 30 }}
                                title="Preview disponible"
                              />
                            )}
                          </div>
                          
                          <div className="flex items-center space-x-2">
                            <motion.button
                              className="p-1 text-gray-400 hover:text-white transition-colors"
                              whileHover={{ scale: 1.1 }}
                              whileTap={{ scale: 0.9 }}
                              onClick={() => {
                                setPreviewContent(generatePreviewHTML(generatedCode));
                                setShowPreview(true);
                              }}
                              title="Actualiser le preview"
                            >
                              <Sparkles className="w-4 h-4" />
                            </motion.button>
                            
                            <motion.button
                              className="p-1 text-gray-400 hover:text-white transition-colors"
                              whileHover={{ scale: 1.1 }}
                              whileTap={{ scale: 0.9 }}
                              onClick={() => {
                                const newWindow = window.open('', '_blank');
                                newWindow?.document.write(generatedHtml || previewContent);
                                newWindow?.document.close();
                              }}
                              title="Ouvrir dans une nouvelle fen√™tre"
                            >
                              <Maximize2 className="w-4 h-4" />
                            </motion.button>
                          </div>
                        </div>
                      </div>
                      
                      {/* Contenu du preview */}
                      <div className="flex-1 bg-white">
                        {showPreview && (generatedHtml || previewContent) ? (
                          <iframe
                            srcDoc={generatedHtml || previewContent}
                            className="w-full h-full border-none"
                            title="Preview Live"
                            sandbox="allow-scripts allow-modals allow-forms"
                          />
                        ) : (
                          <div className="flex items-center justify-center h-full bg-gray-100">
                            <div className="text-center">
                              <Eye className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                              <p className="text-gray-600 mb-2">Aucun preview disponible</p>
                              <p className="text-gray-500 text-sm">
                                G√©n√©rez du code pour voir le rendu en temps r√©el
                              </p>
                              <motion.button
                                className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.95 }}
                                onClick={() => {
                                  setPreviewContent(generatePreviewHTML(generatedCode));
                                  setShowPreview(true);
                                }}
                              >
                                G√©n√©rer Preview
                              </motion.button>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  ) : (
                    /* Configuration Panel */
                    <div className="h-full overflow-y-auto p-6">
                      <ConfigurationPanel />
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
      
      {/* Barre de statut en bas */}
      <StatusBar
        items={[
          {
            id: 'connection',
            type: connectionStatus === 'connected' ? 'connected' : 'disconnected',
            label: 'API',
            value: connectionStatus === 'connected' ? 'Connect√©' : 'D√©connect√©'
          },
          {
            id: 'auth',
            type: isAuthenticated ? 'secure' : 'error',
            label: 'Auth',
            value: isAuthenticated ? (user?.name || 'Connect√©') : 'Non connect√©'
          },
          {
            id: 'workflow',
            type: isWorkflowRunning ? 'running' : 'idle',
            label: 'Workflow',
            value: isWorkflowRunning ? 'Actif' : 'Inactif'
          },
          {
            id: 'messages',
            type: 'active',
            label: 'Messages',
            value: messages.length.toString()
          }
        ]}
      />

      {/* Syst√®me de notifications */}
      <NotificationSystem
        notifications={notifications.notifications}
        onRemove={notifications.remove}
        position="top-right"
      />
    </div>
  );
};

export default TeslaWorkflowInterface;